{"ast":null,"code":"var nodejsCheatSheet = [{\n  \"topic_name\": \"Modules in Node.js\",\n  \"topic_description\": \"Node.js uses a module system to organize code into reusable files. You can create your own modules and use built-in ones.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Creating a Module\",\n    \"example_code\": \"/* mymodule.js */\\n\\nfunction greet(name) {\\n  return `Hello, ${name}!`;\\n}\\n\\nmodule.exports = greet;\"\n  }, {\n    \"subtopic_name\": \"Using a Module\",\n    \"example_code\": \"const mymodule = require('./mymodule');\\nconst message = mymodule('Alice');\\nconsole.log(message); // Hello, Alice!\"\n  }, {\n    \"subtopic_name\": \"Built-in Modules\",\n    \"example_code\": \"const fs = require('fs');\\nconst http = require('http');\\nconst path = require('path');\"\n  }]\n}, {\n  \"topic_name\": \"Asynchronous Programming\",\n  \"topic_description\": \"Node.js is designed for asynchronous programming using callbacks, promises, and async/await.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Using Callbacks\",\n    \"example_code\": \"fs.readFile('file.txt', (err, data) => {\\n  if (err) throw err;\\n  console.log(data.toString());\\n});\"\n  }, {\n    \"subtopic_name\": \"Using Promises\",\n    \"example_code\": \"const readFileAsync = util.promisify(fs.readFile);\\nreadFileAsync('file.txt')\\n  .then(data => console.log(data.toString()))\\n  .catch(err => console.error(err));\"\n  }, {\n    \"subtopic_name\": \"Using async/await\",\n    \"example_code\": \"const readData = async () => {\\n  try {\\n    const data = await readFileAsync('file.txt');\\n    console.log(data.toString());\\n  } catch (err) {\\n    console.error(err);\\n  }\\n};\\nreadData();\"\n  }]\n}, {\n  \"topic_name\": \"File System Operations\",\n  \"topic_description\": \"Perform various file operations like creating, reading, writing, and deleting files using the 'fs' module.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Reading a File\",\n    \"example_code\": \"const fs = require('fs');\\nfs.readFile('file.txt', 'utf8', (err, data) => {\\n  if (err) throw err;\\n  console.log(data);\\n});\"\n  }, {\n    \"subtopic_name\": \"Writing to a File\",\n    \"example_code\": \"const fs = require('fs');\\nconst content = 'Hello, Node.js!';\\nfs.writeFile('output.txt', content, (err) => {\\n  if (err) throw err;\\n  console.log('File saved.');\\n});\"\n  }, {\n    \"subtopic_name\": \"Deleting a File\",\n    \"example_code\": \"const fs = require('fs');\\nfs.unlink('file.txt', (err) => {\\n  if (err) throw err;\\n  console.log('File deleted.');\\n});\"\n  }]\n}, {\n  \"topic_name\": \"Working with Directories\",\n  \"topic_description\": \"Manipulate directories, including creating, reading, renaming, and deleting directories.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Creating a Directory\",\n    \"example_code\": \"const fs = require('fs');\\nfs.mkdir('mydir', (err) => {\\n  if (err) throw err;\\n  console.log('Directory created.');\\n});\"\n  }, {\n    \"subtopic_name\": \"Reading a Directory\",\n    \"example_code\": \"const fs = require('fs');\\nfs.readdir('mydir', (err, files) => {\\n  if (err) throw err;\\n  console.log('Files in directory:', files);\\n});\"\n  }, {\n    \"subtopic_name\": \"Renaming a Directory\",\n    \"example_code\": \"const fs = require('fs');\\nfs.rename('mydir', 'newdir', (err) => {\\n  if (err) throw err;\\n  console.log('Directory renamed.');\\n});\"\n  }]\n}, {\n  \"topic_name\": \"File and Directory Information\",\n  \"topic_description\": \"Retrieve information about files and directories, such as file size, permissions, and timestamps.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"File Stats\",\n    \"example_code\": \"const fs = require('fs');\\nfs.stat('file.txt', (err, stats) => {\\n  if (err) throw err;\\n  console.log('File size:', stats.size, 'bytes');\\n  console.log('Is directory?', stats.isDirectory());\\n  console.log('Last modified:', stats.mtime);\\n});\"\n  }, {\n    \"subtopic_name\": \"Directory Stats\",\n    \"example_code\": \"const fs = require('fs');\\nfs.stat('mydir', (err, stats) => {\\n  if (err) throw err;\\n  console.log('Is directory?', stats.isDirectory());\\n});\"\n  }, {\n    \"subtopic_name\": \"File Permissions\",\n    \"example_code\": \"const fs = require('fs');\\nfs.chmod('file.txt', 0o755, (err) => {\\n  if (err) throw err;\\n  console.log('Permissions changed.');\\n});\"\n  }]\n}, {\n  \"topic_name\": \"HTTP Server\",\n  \"topic_description\": \"Node.js can create HTTP servers for building web applications and APIs.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Creating an HTTP Server\",\n    \"example_code\": \"const http = require('http');\\n\\nconst server = http.createServer((req, res) => {\\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\\n  res.end('Hello, World!');\\n});\\n\\nconst port = 3000;\\nserver.listen(port, () => {\\n  console.log(`Server running at http://localhost:${port}/`);\\n});\"\n  }, {\n    \"subtopic_name\": \"Handling Routes\",\n    \"example_code\": \"const http = require('http');\\n\\nconst server = http.createServer((req, res) => {\\n  if (req.url === '/') {\\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\\n    res.end('Home Page');\\n  } else if (req.url === '/about') {\\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\\n    res.end('About Page');\\n  } else {\\n    res.writeHead(404, { 'Content-Type': 'text/plain' });\\n    res.end('Not Found');\\n  }\\n});\"\n  }, {\n    \"subtopic_name\": \"Handling POST Requests\",\n    \"example_code\": \"const http = require('http');\\n\\nconst server = http.createServer((req, res) => {\\n  if (req.method === 'POST') {\\n    let body = '';\\n    req.on('data', (chunk) => {\\n      body += chunk;\\n    });\\n    req.on('end', () => {\\n      console.log('Received POST data:', body);\\n      res.end('Data received.');\\n    });\\n  }\\n});\"\n  }]\n}, {\n  \"topic_name\": \"Express.js Framework\",\n  \"topic_description\": \"Express.js is a popular Node.js framework for building web applications and APIs. It simplifies routing, middleware, and more.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Installing Express.js\",\n    \"example_code\": \"const express = require('express');\\nconst app = express();\"\n  }, {\n    \"subtopic_name\": \"Creating Routes\",\n    \"example_code\": \"app.get('/', (req, res) => {\\n  res.send('Home Page');\\n});\\n\\napp.get('/about', (req, res) => {\\n  res.send('About Page');\\n});\"\n  }, {\n    \"subtopic_name\": \"Middleware\",\n    \"example_code\": \"app.use(express.json());\\napp.use(express.urlencoded({ extended: true }));\"\n  }]\n}, {\n  \"topic_name\": \"Database Integration\",\n  \"topic_description\": \"Node.js can connect to various databases such as MongoDB, MySQL, and PostgreSQL.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Using MongoDB with Mongoose\",\n    \"example_code\": \"const mongoose = require('mongoose');\\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true });\"\n  }, {\n    \"subtopic_name\": \"Using MySQL with Sequelize\",\n    \"example_code\": \"const Sequelize = require('sequelize');\\nconst sequelize = new Sequelize('database', 'username', 'password', { dialect: 'mysql' });\"\n  }]\n}, {\n  \"topic_name\": \"Authentication and Authorization\",\n  \"topic_description\": \"Implement user authentication and authorization in Node.js applications using libraries like Passport.js.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Using Passport.js\",\n    \"example_code\": \"const passport = require('passport');\\nconst LocalStrategy = require('passport-local').Strategy;\\n\\npassport.use(new LocalStrategy((username, password, done) => {\\n  // Verify user credentials\\n}));\"\n  }, {\n    \"subtopic_name\": \"JWT Authentication\",\n    \"example_code\": \"const jwt = require('jsonwebtoken');\\nconst token = jwt.sign({ userId: 123 }, 'secretKey');\"\n  }]\n}, {\n  \"topic_name\": \"WebSocket Communication\",\n  \"topic_description\": \"Implement real-time communication in Node.js using WebSocket libraries like Socket.io.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Using Socket.io\",\n    \"example_code\": \"const http = require('http');\\nconst server = http.createServer(app);\\nconst io = require('socket.io')(server);\"\n  }, {\n    \"subtopic_name\": \"Handling WebSocket Events\",\n    \"example_code\": \"io.on('connection', (socket) => {\\n  console.log('A user connected');\\n  socket.on('chat message', (message) => {\\n    io.emit('chat message', message);\\n  });\\n  socket.on('disconnect', () => {\\n    console.log('A user disconnected');\\n  });\\n});\"\n  }]\n}, {\n  \"topic_name\": \"RESTful APIs\",\n  \"topic_description\": \"Build RESTful APIs in Node.js for creating, reading, updating, and deleting resources.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Creating API Endpoints\",\n    \"example_code\": \"app.get('/api/posts', (req, res) => {\\n  // Retrieve and send a list of posts\\n});\\n\\napp.post('/api/posts', (req, res) => {\\n  // Create a new post\\n});\"\n  }, {\n    \"subtopic_name\": \"Authentication\",\n    \"example_code\": \"const authenticate = (req, res, next) => {\\n  // Implement authentication logic\\n  next();\\n};\\n\\napp.use('/api', authenticate);\"\n  }, {\n    \"subtopic_name\": \"Validation\",\n    \"example_code\": \"const validate = (req, res, next) => {\\n  // Implement request validation\\n  next();\\n};\\n\\napp.use('/api', validate);\"\n  }]\n}, {\n  \"topic_name\": \"Error Handling\",\n  \"topic_description\": \"Implement error handling strategies in Node.js applications to handle unexpected issues gracefully.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Custom Error Handling Middleware\",\n    \"example_code\": \"app.use((err, req, res, next) => {\\n  console.error(err.stack);\\n  res.status(500).send('Something went wrong!');\\n});\"\n  }, {\n    \"subtopic_name\": \"Handling 404 Errors\",\n    \"example_code\": \"app.use((req, res) => {\\n  res.status(404).send('Not Found');\\n});\"\n  }]\n}, {\n  \"topic_name\": \"Testing Node.js Applications\",\n  \"topic_description\": \"Write unit and integration tests for Node.js applications using testing frameworks like Mocha and Jest.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Using Mocha\",\n    \"example_code\": \"const assert = require('assert');\\ndescribe('Array', () => {\\n  it('should return -1 when the value is not present', () => {\\n    assert.equal([1, 2, 3].indexOf(4), -1);\\n  });\\n});\"\n  }, {\n    \"subtopic_name\": \"Using Jest\",\n    \"example_code\": \"test('adds 1 + 2 to equal 3', () => {\\n  expect(sum(1, 2)).toBe(3);\\n});\"\n  }]\n}, {\n  \"topic_name\": \"Promises and Async/Await\",\n  \"topic_description\": \"Learn about Promises and Async/Await in JavaScript for handling asynchronous operations effectively.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Creating a Promise\",\n    \"example_code\": \"const fetchData = () => {\\n  return new Promise((resolve, reject) => {\\n    // Perform an async operation\\n  });\\n};\"\n  }, {\n    \"subtopic_name\": \"Using Async/Await\",\n    \"example_code\": \"const fetchData = async () => {\\n  try {\\n    const data = await fetchData();\\n    console.log(data);\\n  } catch (error) {\\n    console.error(error);\\n  }\\n};\"\n  }]\n}, {\n  \"topic_name\": \"Event Emitters\",\n  \"topic_description\": \"Node.js provides Event Emitters for building custom event-driven architectures.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Creating an Event Emitter\",\n    \"example_code\": \"const EventEmitter = require('events');\\nclass MyEmitter extends EventEmitter {}\\nconst myEmitter = new MyEmitter();\"\n  }, {\n    \"subtopic_name\": \"Listening for Events\",\n    \"example_code\": \"myEmitter.on('event', () => {\\n  console.log('Event occurred');\\n});\"\n  }, {\n    \"subtopic_name\": \"Emitting Events\",\n    \"example_code\": \"myEmitter.emit('event');\"\n  }]\n}, {\n  \"topic_name\": \"Child Processes\",\n  \"topic_description\": \"Run child processes in Node.js to execute external commands or scripts.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Using 'child_process' Module\",\n    \"example_code\": \"const { exec } = require('child_process');\\nexec('ls -l', (error, stdout, stderr) => {\\n  if (error) {\\n    console.error(`Error: ${error.message}`);\\n    return;\\n  }\\n  if (stderr) {\\n    console.error(`Stderr: ${stderr}`);\\n    return;\\n  }\\n  console.log(`Result: ${stdout}`);\\n});\"\n  }]\n}, {\n  \"topic_name\": \"Debugging Node.js\",\n  \"topic_description\": \"Learn debugging techniques for Node.js applications using built-in and third-party tools.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Using 'console' Module\",\n    \"example_code\": \"console.log('Debugging message');\"\n  }, {\n    \"subtopic_name\": \"Debugging with 'inspect'\",\n    \"example_code\": \"node inspect myscript.js\\nchrome://inspect\\n// Debugging in Chrome DevTools\"\n  }]\n}, {\n  \"topic_name\": \"Deployment and Hosting\",\n  \"topic_description\": \"Deploy Node.js applications to production servers and choose a hosting provider.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Deploying on Heroku\",\n    \"example_code\": \"// Install Heroku CLI\\nheroku login\\nheroku create\\nheroku git:remote -a your-app-name\\n// Deploy using Git\\ngit push heroku master\"\n  }, {\n    \"subtopic_name\": \"Choosing a Hosting Provider\",\n    \"example_code\": \"AWS, Google Cloud, Azure, DigitalOcean, etc.\"\n  }]\n}];\n\n// console.log(nodejsCheatSheet[0]);\nexport default nodejsCheatSheet;","map":{"version":3,"names":["nodejsCheatSheet"],"sources":["D:/Projects/educationWebsite/education-website/src/CoursesFolder/NodeJs/NodeJsCourseData.js"],"sourcesContent":["var nodejsCheatSheet = [\r\n    {\r\n        \"topic_name\": \"Modules in Node.js\",\r\n        \"topic_description\": \"Node.js uses a module system to organize code into reusable files. You can create your own modules and use built-in ones.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Creating a Module\",\r\n                \"example_code\": \"/* mymodule.js */\\n\\nfunction greet(name) {\\n  return `Hello, ${name}!`;\\n}\\n\\nmodule.exports = greet;\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using a Module\",\r\n                \"example_code\": \"const mymodule = require('./mymodule');\\nconst message = mymodule('Alice');\\nconsole.log(message); // Hello, Alice!\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Built-in Modules\",\r\n                \"example_code\": \"const fs = require('fs');\\nconst http = require('http');\\nconst path = require('path');\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Asynchronous Programming\",\r\n        \"topic_description\": \"Node.js is designed for asynchronous programming using callbacks, promises, and async/await.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Using Callbacks\",\r\n                \"example_code\": \"fs.readFile('file.txt', (err, data) => {\\n  if (err) throw err;\\n  console.log(data.toString());\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using Promises\",\r\n                \"example_code\": \"const readFileAsync = util.promisify(fs.readFile);\\nreadFileAsync('file.txt')\\n  .then(data => console.log(data.toString()))\\n  .catch(err => console.error(err));\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using async/await\",\r\n                \"example_code\": \"const readData = async () => {\\n  try {\\n    const data = await readFileAsync('file.txt');\\n    console.log(data.toString());\\n  } catch (err) {\\n    console.error(err);\\n  }\\n};\\nreadData();\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"File System Operations\",\r\n        \"topic_description\": \"Perform various file operations like creating, reading, writing, and deleting files using the 'fs' module.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Reading a File\",\r\n                \"example_code\": \"const fs = require('fs');\\nfs.readFile('file.txt', 'utf8', (err, data) => {\\n  if (err) throw err;\\n  console.log(data);\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Writing to a File\",\r\n                \"example_code\": \"const fs = require('fs');\\nconst content = 'Hello, Node.js!';\\nfs.writeFile('output.txt', content, (err) => {\\n  if (err) throw err;\\n  console.log('File saved.');\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Deleting a File\",\r\n                \"example_code\": \"const fs = require('fs');\\nfs.unlink('file.txt', (err) => {\\n  if (err) throw err;\\n  console.log('File deleted.');\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Working with Directories\",\r\n        \"topic_description\": \"Manipulate directories, including creating, reading, renaming, and deleting directories.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Creating a Directory\",\r\n                \"example_code\": \"const fs = require('fs');\\nfs.mkdir('mydir', (err) => {\\n  if (err) throw err;\\n  console.log('Directory created.');\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Reading a Directory\",\r\n                \"example_code\": \"const fs = require('fs');\\nfs.readdir('mydir', (err, files) => {\\n  if (err) throw err;\\n  console.log('Files in directory:', files);\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Renaming a Directory\",\r\n                \"example_code\": \"const fs = require('fs');\\nfs.rename('mydir', 'newdir', (err) => {\\n  if (err) throw err;\\n  console.log('Directory renamed.');\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"File and Directory Information\",\r\n        \"topic_description\": \"Retrieve information about files and directories, such as file size, permissions, and timestamps.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"File Stats\",\r\n                \"example_code\": \"const fs = require('fs');\\nfs.stat('file.txt', (err, stats) => {\\n  if (err) throw err;\\n  console.log('File size:', stats.size, 'bytes');\\n  console.log('Is directory?', stats.isDirectory());\\n  console.log('Last modified:', stats.mtime);\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Directory Stats\",\r\n                \"example_code\": \"const fs = require('fs');\\nfs.stat('mydir', (err, stats) => {\\n  if (err) throw err;\\n  console.log('Is directory?', stats.isDirectory());\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"File Permissions\",\r\n                \"example_code\": \"const fs = require('fs');\\nfs.chmod('file.txt', 0o755, (err) => {\\n  if (err) throw err;\\n  console.log('Permissions changed.');\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"HTTP Server\",\r\n        \"topic_description\": \"Node.js can create HTTP servers for building web applications and APIs.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Creating an HTTP Server\",\r\n                \"example_code\": \"const http = require('http');\\n\\nconst server = http.createServer((req, res) => {\\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\\n  res.end('Hello, World!');\\n});\\n\\nconst port = 3000;\\nserver.listen(port, () => {\\n  console.log(`Server running at http://localhost:${port}/`);\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Handling Routes\",\r\n                \"example_code\": \"const http = require('http');\\n\\nconst server = http.createServer((req, res) => {\\n  if (req.url === '/') {\\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\\n    res.end('Home Page');\\n  } else if (req.url === '/about') {\\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\\n    res.end('About Page');\\n  } else {\\n    res.writeHead(404, { 'Content-Type': 'text/plain' });\\n    res.end('Not Found');\\n  }\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Handling POST Requests\",\r\n                \"example_code\": \"const http = require('http');\\n\\nconst server = http.createServer((req, res) => {\\n  if (req.method === 'POST') {\\n    let body = '';\\n    req.on('data', (chunk) => {\\n      body += chunk;\\n    });\\n    req.on('end', () => {\\n      console.log('Received POST data:', body);\\n      res.end('Data received.');\\n    });\\n  }\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Express.js Framework\",\r\n        \"topic_description\": \"Express.js is a popular Node.js framework for building web applications and APIs. It simplifies routing, middleware, and more.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Installing Express.js\",\r\n                \"example_code\": \"const express = require('express');\\nconst app = express();\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Creating Routes\",\r\n                \"example_code\": \"app.get('/', (req, res) => {\\n  res.send('Home Page');\\n});\\n\\napp.get('/about', (req, res) => {\\n  res.send('About Page');\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Middleware\",\r\n                \"example_code\": \"app.use(express.json());\\napp.use(express.urlencoded({ extended: true }));\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Database Integration\",\r\n        \"topic_description\": \"Node.js can connect to various databases such as MongoDB, MySQL, and PostgreSQL.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Using MongoDB with Mongoose\",\r\n                \"example_code\": \"const mongoose = require('mongoose');\\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true });\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using MySQL with Sequelize\",\r\n                \"example_code\": \"const Sequelize = require('sequelize');\\nconst sequelize = new Sequelize('database', 'username', 'password', { dialect: 'mysql' });\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Authentication and Authorization\",\r\n        \"topic_description\": \"Implement user authentication and authorization in Node.js applications using libraries like Passport.js.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Using Passport.js\",\r\n                \"example_code\": \"const passport = require('passport');\\nconst LocalStrategy = require('passport-local').Strategy;\\n\\npassport.use(new LocalStrategy((username, password, done) => {\\n  // Verify user credentials\\n}));\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"JWT Authentication\",\r\n                \"example_code\": \"const jwt = require('jsonwebtoken');\\nconst token = jwt.sign({ userId: 123 }, 'secretKey');\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"WebSocket Communication\",\r\n        \"topic_description\": \"Implement real-time communication in Node.js using WebSocket libraries like Socket.io.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Using Socket.io\",\r\n                \"example_code\": \"const http = require('http');\\nconst server = http.createServer(app);\\nconst io = require('socket.io')(server);\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Handling WebSocket Events\",\r\n                \"example_code\": \"io.on('connection', (socket) => {\\n  console.log('A user connected');\\n  socket.on('chat message', (message) => {\\n    io.emit('chat message', message);\\n  });\\n  socket.on('disconnect', () => {\\n    console.log('A user disconnected');\\n  });\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"RESTful APIs\",\r\n        \"topic_description\": \"Build RESTful APIs in Node.js for creating, reading, updating, and deleting resources.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Creating API Endpoints\",\r\n                \"example_code\": \"app.get('/api/posts', (req, res) => {\\n  // Retrieve and send a list of posts\\n});\\n\\napp.post('/api/posts', (req, res) => {\\n  // Create a new post\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Authentication\",\r\n                \"example_code\": \"const authenticate = (req, res, next) => {\\n  // Implement authentication logic\\n  next();\\n};\\n\\napp.use('/api', authenticate);\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Validation\",\r\n                \"example_code\": \"const validate = (req, res, next) => {\\n  // Implement request validation\\n  next();\\n};\\n\\napp.use('/api', validate);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Error Handling\",\r\n        \"topic_description\": \"Implement error handling strategies in Node.js applications to handle unexpected issues gracefully.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Custom Error Handling Middleware\",\r\n                \"example_code\": \"app.use((err, req, res, next) => {\\n  console.error(err.stack);\\n  res.status(500).send('Something went wrong!');\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Handling 404 Errors\",\r\n                \"example_code\": \"app.use((req, res) => {\\n  res.status(404).send('Not Found');\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Testing Node.js Applications\",\r\n        \"topic_description\": \"Write unit and integration tests for Node.js applications using testing frameworks like Mocha and Jest.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Using Mocha\",\r\n                \"example_code\": \"const assert = require('assert');\\ndescribe('Array', () => {\\n  it('should return -1 when the value is not present', () => {\\n    assert.equal([1, 2, 3].indexOf(4), -1);\\n  });\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using Jest\",\r\n                \"example_code\": \"test('adds 1 + 2 to equal 3', () => {\\n  expect(sum(1, 2)).toBe(3);\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Promises and Async/Await\",\r\n        \"topic_description\": \"Learn about Promises and Async/Await in JavaScript for handling asynchronous operations effectively.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Creating a Promise\",\r\n                \"example_code\": \"const fetchData = () => {\\n  return new Promise((resolve, reject) => {\\n    // Perform an async operation\\n  });\\n};\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using Async/Await\",\r\n                \"example_code\": \"const fetchData = async () => {\\n  try {\\n    const data = await fetchData();\\n    console.log(data);\\n  } catch (error) {\\n    console.error(error);\\n  }\\n};\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Event Emitters\",\r\n        \"topic_description\": \"Node.js provides Event Emitters for building custom event-driven architectures.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Creating an Event Emitter\",\r\n                \"example_code\": \"const EventEmitter = require('events');\\nclass MyEmitter extends EventEmitter {}\\nconst myEmitter = new MyEmitter();\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Listening for Events\",\r\n                \"example_code\": \"myEmitter.on('event', () => {\\n  console.log('Event occurred');\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Emitting Events\",\r\n                \"example_code\": \"myEmitter.emit('event');\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Child Processes\",\r\n        \"topic_description\": \"Run child processes in Node.js to execute external commands or scripts.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Using 'child_process' Module\",\r\n                \"example_code\": \"const { exec } = require('child_process');\\nexec('ls -l', (error, stdout, stderr) => {\\n  if (error) {\\n    console.error(`Error: ${error.message}`);\\n    return;\\n  }\\n  if (stderr) {\\n    console.error(`Stderr: ${stderr}`);\\n    return;\\n  }\\n  console.log(`Result: ${stdout}`);\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Debugging Node.js\",\r\n        \"topic_description\": \"Learn debugging techniques for Node.js applications using built-in and third-party tools.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Using 'console' Module\",\r\n                \"example_code\": \"console.log('Debugging message');\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Debugging with 'inspect'\",\r\n                \"example_code\": \"node inspect myscript.js\\nchrome://inspect\\n// Debugging in Chrome DevTools\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Deployment and Hosting\",\r\n        \"topic_description\": \"Deploy Node.js applications to production servers and choose a hosting provider.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Deploying on Heroku\",\r\n                \"example_code\": \"// Install Heroku CLI\\nheroku login\\nheroku create\\nheroku git:remote -a your-app-name\\n// Deploy using Git\\ngit push heroku master\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Choosing a Hosting Provider\",\r\n                \"example_code\": \"AWS, Google Cloud, Azure, DigitalOcean, etc.\"\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n// console.log(nodejsCheatSheet[0]);\r\nexport default nodejsCheatSheet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}