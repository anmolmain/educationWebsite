{"ast":null,"code":"var web3jsCheatSheet = [{\n  \"topic_name\": \"Introduction to web3.js\",\n  \"topic_description\": \"Web3.js is a JavaScript library for interacting with the Ethereum blockchain. It allows developers to build decentralized applications (DApps) and interact with smart contracts.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Installing web3.js\",\n    \"example_code\": \"// Install web3.js using npm\\nnpm install web3\"\n  }, {\n    \"subtopic_name\": \"Importing web3.js\",\n    \"example_code\": \"const Web3 = require('web3');\\nconst web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\n  }]\n}, {\n  \"topic_name\": \"Connecting to Ethereum\",\n  \"topic_description\": \"To interact with the Ethereum blockchain, you need to connect to an Ethereum node. Infura is a popular choice for connecting to Ethereum without running a local node.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Connecting to Infura\",\n    \"example_code\": \"const web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\n  }, {\n    \"subtopic_name\": \"Checking Connection\",\n    \"example_code\": \"web3.eth.net.isListening()\\n  .then(console.log)\\n  .catch(console.error);\"\n  }]\n}, {\n  \"topic_name\": \"Account Management\",\n  \"topic_description\": \"Web3.js provides functions for managing Ethereum accounts, including creating, unlocking, and listing accounts.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Creating an Account\",\n    \"example_code\": \"const newAccount = web3.eth.accounts.create();\"\n  }, {\n    \"subtopic_name\": \"Unlocking an Account\",\n    \"example_code\": \"web3.eth.personal.unlockAccount(address, password, durationInSeconds);\"\n  }, {\n    \"subtopic_name\": \"Listing Accounts\",\n    \"example_code\": \"web3.eth.getAccounts()\\n  .then(console.log)\\n  .catch(console.error);\"\n  }]\n}, {\n  \"topic_name\": \"Sending Ether\",\n  \"topic_description\": \"You can use web3.js to send Ether (ETH) from one account to another. This is commonly used for transactions and payments.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Sending Ether\",\n    \"example_code\": \"web3.eth.sendTransaction({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n})\"\n  }, {\n    \"subtopic_name\": \"Checking Ether Balance\",\n    \"example_code\": \"web3.eth.getBalance(address)\\n  .then(balance => {\\n    const etherBalance = web3.utils.fromWei(balance, 'ether');\\n    console.log(`Balance: ${etherBalance} ETH`);\\n  })\\n  .catch(console.error);\"\n  }]\n}, {\n  \"topic_name\": \"Smart Contracts\",\n  \"topic_description\": \"Web3.js allows you to deploy and interact with smart contracts on the Ethereum blockchain.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Deploying a Smart Contract\",\n    \"example_code\": \"// Create a contract object with ABI and bytecode\\nconst contract = new web3.eth.Contract(abi);\\n\\n// Deploy the contract\\ncontract.deploy({\\n  data: '0x' + bytecode,\\n  arguments: [arg1, arg2]\\n})\\n.send({\\n  from: accountAddress,\\n  gas: 2000000\\n})\\n.then(newContract => {\\n  console.log('Contract deployed at:', newContract.options.address);\\n});\"\n  }, {\n    \"subtopic_name\": \"Interacting with a Smart Contract\",\n    \"example_code\": \"// Create a contract instance with ABI and contract address\\nconst contract = new web3.eth.Contract(abi, contractAddress);\\n\\n// Call a contract function\\ncontract.methods.someFunction(arg1, arg2)\\n.call({ from: accountAddress })\\n.then(result => console.log('Function result:', result));\"\n  }]\n}, {\n  \"topic_name\": \"Transaction Handling\",\n  \"topic_description\": \"Web3.js allows you to send transactions, check transaction status, and get transaction receipts.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Sending a Transaction\",\n    \"example_code\": \"web3.eth.sendTransaction({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n})\\n.on('transactionHash', hash => console.log('Transaction Hash:', hash))\\n.on('receipt', receipt => console.log('Transaction Receipt:', receipt));\"\n  }, {\n    \"subtopic_name\": \"Checking Transaction Status\",\n    \"example_code\": \"web3.eth.getTransactionReceipt(transactionHash)\\n  .then(receipt => {\\n    if (receipt && receipt.status) {\\n      console.log('Transaction succeeded');\\n    } else if (receipt) {\\n      console.log('Transaction failed');\\n    } else {\\n      console.log('Transaction not mined');\\n    }\\n  })\\n  .catch(console.error);\"\n  }]\n}, {\n  \"topic_name\": \"Events\",\n  \"topic_description\": \"Ethereum smart contracts emit events, and web3.js allows you to listen for and handle these events.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Listening for Events\",\n    \"example_code\": \"// Create a contract instance with ABI and contract address\\nconst contract = new web3.eth.Contract(abi, contractAddress);\\n\\n// Listen for an event\\ncontract.events.MyEvent({\\n  fromBlock: 0,\\n  toBlock: 'latest'\\n}, (error, event) => {\\n  if (error) {\\n    console.error('Event error:', error);\\n  } else {\\n    console.log('Event data:', event.returnValues);\\n  }\\n});\"\n  }]\n}, {\n  \"topic_name\": \"Gas and Gas Price\",\n  \"topic_description\": \"When sending transactions on Ethereum, you need to specify gas and gas prices. Web3.js provides functions to estimate gas and get gas prices.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Estimating Gas\",\n    \"example_code\": \"web3.eth.estimateGas({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n})\\n.then(gasEstimate => console.log('Gas Estimate:', gasEstimate));\"\n  }, {\n    \"subtopic_name\": \"Getting Gas Price\",\n    \"example_code\": \"web3.eth.getGasPrice()\\n  .then(gasPrice => console.log('Gas Price:', gasPrice));\"\n  }]\n}, {\n  \"topic_name\": \"Web3 Providers\",\n  \"topic_description\": \"Web3.js supports various providers for connecting to Ethereum. Infura, MetaMask, and local nodes are common choices.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Using Infura Provider\",\n    \"example_code\": \"const web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\n  }, {\n    \"subtopic_name\": \"Using MetaMask Provider\",\n    \"example_code\": \"if (window.ethereum) {\\n  const web3 = new Web3(window.ethereum);\\n  try {\\n    // Request account access if needed\\n    await window.ethereum.enable();\\n  } catch (error) {\\n    // User denied account access\\n  }\\n}\"\n  }, {\n    \"subtopic_name\": \"Using Local Node Provider\",\n    \"example_code\": \"const web3 = new Web3('http://localhost:8545');\"\n  }]\n}, {\n  \"topic_name\": \"Working with Tokens\",\n  \"topic_description\": \"Ethereum-based tokens (ERC-20, ERC-721, etc.) can be managed using web3.js to transfer, check balances, and interact with token contracts.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Transferring Tokens\",\n    \"example_code\": \"// Create a token contract instance\\nconst tokenContract = new web3.eth.Contract(abi, tokenAddress);\\n\\n// Transfer tokens\\ntokenContract.methods.transfer(toAddress, amount).send({ from: accountAddress });\"\n  }, {\n    \"subtopic_name\": \"Checking Token Balance\",\n    \"example_code\": \"// Create a token contract instance\\nconst tokenContract = new web3.eth.Contract(abi, tokenAddress);\\n\\n// Check token balance\\ntokenContract.methods.balanceOf(accountAddress).call().then(balance => console.log('Token Balance:', balance));\"\n  }]\n}, {\n  \"topic_name\": \"Working with IPFS\",\n  \"topic_description\": \"InterPlanetary File System (IPFS) can be integrated with web3.js to store and retrieve data on a decentralized network.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Uploading Data to IPFS\",\n    \"example_code\": \"const ipfs = ipfsClient('localhost', '5001');\\n\\nipfs.add(Buffer.from('Hello, IPFS!'), (err, result) => {\\n  if (err) {\\n    console.error('IPFS upload error:', err);\\n  } else {\\n    console.log('IPFS Hash:', result[0].hash);\\n  }\\n});\"\n  }, {\n    \"subtopic_name\": \"Retrieving Data from IPFS\",\n    \"example_code\": \"const ipfs = ipfsClient('localhost', '5001');\\n\\nipfs.cat(ipfsHash, (err, data) => {\\n  if (err) {\\n    console.error('IPFS retrieval error:', err);\\n  } else {\\n    console.log('IPFS Data:', data.toString());\\n  }\\n});\"\n  }]\n}, {\n  \"topic_name\": \"Security Best Practices\",\n  \"topic_description\": \"When working with web3.js and Ethereum, it's important to follow security best practices to protect your assets and applications.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Protecting Private Keys\",\n    \"example_code\": \"Never expose or share your private keys with anyone. Use hardware wallets or secure key management solutions.\"\n  }, {\n    \"subtopic_name\": \"Avoiding Scams\",\n    \"example_code\": \"Be cautious of phishing websites, scams, and fraudulent smart contracts. Verify contract addresses and use trusted sources.\"\n  }, {\n    \"subtopic_name\": \"Testing on Testnets\",\n    \"example_code\": \"Before deploying to the mainnet, test your smart contracts and applications on Ethereum testnets to ensure functionality and security.\"\n  }]\n}];","map":{"version":3,"names":["web3jsCheatSheet"],"sources":["D:/Projects/educationWebsite/education-website/src/CoursesFolder/Web3js/Web3jsCourseData.js"],"sourcesContent":["var web3jsCheatSheet = [\r\n    {\r\n        \"topic_name\": \"Introduction to web3.js\",\r\n        \"topic_description\": \"Web3.js is a JavaScript library for interacting with the Ethereum blockchain. It allows developers to build decentralized applications (DApps) and interact with smart contracts.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Installing web3.js\",\r\n                \"example_code\": \"// Install web3.js using npm\\nnpm install web3\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Importing web3.js\",\r\n                \"example_code\": \"const Web3 = require('web3');\\nconst web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Connecting to Ethereum\",\r\n        \"topic_description\": \"To interact with the Ethereum blockchain, you need to connect to an Ethereum node. Infura is a popular choice for connecting to Ethereum without running a local node.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Connecting to Infura\",\r\n                \"example_code\": \"const web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Checking Connection\",\r\n                \"example_code\": \"web3.eth.net.isListening()\\n  .then(console.log)\\n  .catch(console.error);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Account Management\",\r\n        \"topic_description\": \"Web3.js provides functions for managing Ethereum accounts, including creating, unlocking, and listing accounts.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Creating an Account\",\r\n                \"example_code\": \"const newAccount = web3.eth.accounts.create();\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Unlocking an Account\",\r\n                \"example_code\": \"web3.eth.personal.unlockAccount(address, password, durationInSeconds);\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Listing Accounts\",\r\n                \"example_code\": \"web3.eth.getAccounts()\\n  .then(console.log)\\n  .catch(console.error);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Sending Ether\",\r\n        \"topic_description\": \"You can use web3.js to send Ether (ETH) from one account to another. This is commonly used for transactions and payments.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Sending Ether\",\r\n                \"example_code\": \"web3.eth.sendTransaction({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n})\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Checking Ether Balance\",\r\n                \"example_code\": \"web3.eth.getBalance(address)\\n  .then(balance => {\\n    const etherBalance = web3.utils.fromWei(balance, 'ether');\\n    console.log(`Balance: ${etherBalance} ETH`);\\n  })\\n  .catch(console.error);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Smart Contracts\",\r\n        \"topic_description\": \"Web3.js allows you to deploy and interact with smart contracts on the Ethereum blockchain.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Deploying a Smart Contract\",\r\n                \"example_code\": \"// Create a contract object with ABI and bytecode\\nconst contract = new web3.eth.Contract(abi);\\n\\n// Deploy the contract\\ncontract.deploy({\\n  data: '0x' + bytecode,\\n  arguments: [arg1, arg2]\\n})\\n.send({\\n  from: accountAddress,\\n  gas: 2000000\\n})\\n.then(newContract => {\\n  console.log('Contract deployed at:', newContract.options.address);\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Interacting with a Smart Contract\",\r\n                \"example_code\": \"// Create a contract instance with ABI and contract address\\nconst contract = new web3.eth.Contract(abi, contractAddress);\\n\\n// Call a contract function\\ncontract.methods.someFunction(arg1, arg2)\\n.call({ from: accountAddress })\\n.then(result => console.log('Function result:', result));\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Transaction Handling\",\r\n        \"topic_description\": \"Web3.js allows you to send transactions, check transaction status, and get transaction receipts.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Sending a Transaction\",\r\n                \"example_code\": \"web3.eth.sendTransaction({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n})\\n.on('transactionHash', hash => console.log('Transaction Hash:', hash))\\n.on('receipt', receipt => console.log('Transaction Receipt:', receipt));\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Checking Transaction Status\",\r\n                \"example_code\": \"web3.eth.getTransactionReceipt(transactionHash)\\n  .then(receipt => {\\n    if (receipt && receipt.status) {\\n      console.log('Transaction succeeded');\\n    } else if (receipt) {\\n      console.log('Transaction failed');\\n    } else {\\n      console.log('Transaction not mined');\\n    }\\n  })\\n  .catch(console.error);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Events\",\r\n        \"topic_description\": \"Ethereum smart contracts emit events, and web3.js allows you to listen for and handle these events.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Listening for Events\",\r\n                \"example_code\": \"// Create a contract instance with ABI and contract address\\nconst contract = new web3.eth.Contract(abi, contractAddress);\\n\\n// Listen for an event\\ncontract.events.MyEvent({\\n  fromBlock: 0,\\n  toBlock: 'latest'\\n}, (error, event) => {\\n  if (error) {\\n    console.error('Event error:', error);\\n  } else {\\n    console.log('Event data:', event.returnValues);\\n  }\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Gas and Gas Price\",\r\n        \"topic_description\": \"When sending transactions on Ethereum, you need to specify gas and gas prices. Web3.js provides functions to estimate gas and get gas prices.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Estimating Gas\",\r\n                \"example_code\": \"web3.eth.estimateGas({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n})\\n.then(gasEstimate => console.log('Gas Estimate:', gasEstimate));\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Getting Gas Price\",\r\n                \"example_code\": \"web3.eth.getGasPrice()\\n  .then(gasPrice => console.log('Gas Price:', gasPrice));\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Web3 Providers\",\r\n        \"topic_description\": \"Web3.js supports various providers for connecting to Ethereum. Infura, MetaMask, and local nodes are common choices.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Using Infura Provider\",\r\n                \"example_code\": \"const web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using MetaMask Provider\",\r\n                \"example_code\": \"if (window.ethereum) {\\n  const web3 = new Web3(window.ethereum);\\n  try {\\n    // Request account access if needed\\n    await window.ethereum.enable();\\n  } catch (error) {\\n    // User denied account access\\n  }\\n}\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using Local Node Provider\",\r\n                \"example_code\": \"const web3 = new Web3('http://localhost:8545');\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Working with Tokens\",\r\n        \"topic_description\": \"Ethereum-based tokens (ERC-20, ERC-721, etc.) can be managed using web3.js to transfer, check balances, and interact with token contracts.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Transferring Tokens\",\r\n                \"example_code\": \"// Create a token contract instance\\nconst tokenContract = new web3.eth.Contract(abi, tokenAddress);\\n\\n// Transfer tokens\\ntokenContract.methods.transfer(toAddress, amount).send({ from: accountAddress });\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Checking Token Balance\",\r\n                \"example_code\": \"// Create a token contract instance\\nconst tokenContract = new web3.eth.Contract(abi, tokenAddress);\\n\\n// Check token balance\\ntokenContract.methods.balanceOf(accountAddress).call().then(balance => console.log('Token Balance:', balance));\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Working with IPFS\",\r\n        \"topic_description\": \"InterPlanetary File System (IPFS) can be integrated with web3.js to store and retrieve data on a decentralized network.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Uploading Data to IPFS\",\r\n                \"example_code\": \"const ipfs = ipfsClient('localhost', '5001');\\n\\nipfs.add(Buffer.from('Hello, IPFS!'), (err, result) => {\\n  if (err) {\\n    console.error('IPFS upload error:', err);\\n  } else {\\n    console.log('IPFS Hash:', result[0].hash);\\n  }\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Retrieving Data from IPFS\",\r\n                \"example_code\": \"const ipfs = ipfsClient('localhost', '5001');\\n\\nipfs.cat(ipfsHash, (err, data) => {\\n  if (err) {\\n    console.error('IPFS retrieval error:', err);\\n  } else {\\n    console.log('IPFS Data:', data.toString());\\n  }\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Security Best Practices\",\r\n        \"topic_description\": \"When working with web3.js and Ethereum, it's important to follow security best practices to protect your assets and applications.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Protecting Private Keys\",\r\n                \"example_code\": \"Never expose or share your private keys with anyone. Use hardware wallets or secure key management solutions.\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Avoiding Scams\",\r\n                \"example_code\": \"Be cautious of phishing websites, scams, and fraudulent smart contracts. Verify contract addresses and use trusted sources.\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Testing on Testnets\",\r\n                \"example_code\": \"Before deploying to the mainnet, test your smart contracts and applications on Ethereum testnets to ensure functionality and security.\"\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}