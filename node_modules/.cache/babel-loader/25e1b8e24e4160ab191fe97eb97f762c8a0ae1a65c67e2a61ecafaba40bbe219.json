{"ast":null,"code":"export var subj;\nvar Web3jsCourseData = [{\n  \"topic_name\": \"Introduction to web3.js\",\n  \"topic_description\": \"Web3.js is a JavaScript library for interacting with the Ethereum blockchain. It allows developers to build decentralized applications (DApps) and interact with smart contracts.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Installing web3.js\",\n    \"example_code\": \"// Install web3.js using npm\\nnpm install web3\"\n  }, {\n    \"subtopic_name\": \"Importing web3.js\",\n    \"example_code\": \"const Web3 = require('web3');\\nconst web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\n  }]\n}, {\n  \"topic_name\": \"Connecting to Ethereum\",\n  \"topic_description\": \"To interact with the Ethereum blockchain, you need to connect to an Ethereum node. Infura is a popular choice for connecting to Ethereum without running a local node.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Connecting to Infura\",\n    \"example_code\": \"const web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\n  }, {\n    \"subtopic_name\": \"Checking Connection\",\n    \"example_code\": \"web3.eth.net.isListening()\\n  .then(console.log)\\n  .catch(console.error);\"\n  }]\n}, {\n  \"topic_name\": \"Account Management\",\n  \"topic_description\": \"Web3.js provides functions for managing Ethereum accounts, including creating, unlocking, and listing accounts.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Creating an Account\",\n    \"example_code\": \"const newAccount = web3.eth.accounts.create();\"\n  }, {\n    \"subtopic_name\": \"Unlocking an Account\",\n    \"example_code\": \"web3.eth.personal.unlockAccount(address, password, durationInSeconds);\"\n  }, {\n    \"subtopic_name\": \"Listing Accounts\",\n    \"example_code\": \"web3.eth.getAccounts()\\n  .then(console.log)\\n  .catch(console.error);\"\n  }]\n}, {\n  \"topic_name\": \"Sending Ether\",\n  \"topic_description\": \"You can use web3.js to send Ether (ETH) from one account to another. This is commonly used for transactions and payments.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Sending Ether\",\n    \"example_code\": \"web3.eth.sendTransaction({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n})\"\n  }, {\n    \"subtopic_name\": \"Checking Ether Balance\",\n    \"example_code\": \"web3.eth.getBalance(address)\\n  .then(balance => {\\n    const etherBalance = web3.utils.fromWei(balance, 'ether');\\n    console.log(`Balance: ${etherBalance} ETH`);\\n  })\\n  .catch(console.error);\"\n  }]\n}, {\n  \"topic_name\": \"Smart Contracts\",\n  \"topic_description\": \"Web3.js allows you to deploy and interact with smart contracts on the Ethereum blockchain.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Deploying a Smart Contract\",\n    \"example_code\": \"// Create a contract object with ABI and bytecode\\nconst contract = new web3.eth.Contract(abi);\\n\\n// Deploy the contract\\ncontract.deploy({\\n  data: '0x' + bytecode,\\n  arguments: [arg1, arg2]\\n})\\n.send({\\n  from: accountAddress,\\n  gas: 2000000\\n})\\n.then(newContract => {\\n  console.log('Contract deployed at:', newContract.options.address);\\n});\"\n  }, {\n    \"subtopic_name\": \"Interacting with a Smart Contract\",\n    \"example_code\": \"// Create a contract instance with ABI and contract address\\nconst contract = new web3.eth.Contract(abi, contractAddress);\\n\\n// Call a contract function\\ncontract.methods.someFunction(arg1, arg2)\\n.call({ from: accountAddress })\\n.then(result => console.log('Function result:', result));\"\n  }]\n}, {\n  \"topic_name\": \"Transaction Handling\",\n  \"topic_description\": \"Web3.js allows you to send transactions, check transaction status, and get transaction receipts.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Sending a Transaction\",\n    \"example_code\": \"web3.eth.sendTransaction({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n})\\n.on('transactionHash', hash => console.log('Transaction Hash:', hash))\\n.on('receipt', receipt => console.log('Transaction Receipt:', receipt));\"\n  }, {\n    \"subtopic_name\": \"Checking Transaction Status\",\n    \"example_code\": \"web3.eth.getTransactionReceipt(transactionHash)\\n  .then(receipt => {\\n    if (receipt && receipt.status) {\\n      console.log('Transaction succeeded');\\n    } else if (receipt) {\\n      console.log('Transaction failed');\\n    } else {\\n      console.log('Transaction not mined');\\n    }\\n  })\\n  .catch(console.error);\"\n  }]\n}, {\n  \"topic_name\": \"Events\",\n  \"topic_description\": \"Ethereum smart contracts emit events, and web3.js allows you to listen for and handle these events.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Listening for Events\",\n    \"example_code\": \"// Create a contract instance with ABI and contract address\\nconst contract = new web3.eth.Contract(abi, contractAddress);\\n\\n// Listen for an event\\ncontract.events.MyEvent({\\n  fromBlock: 0,\\n  toBlock: 'latest'\\n}, (error, event) => {\\n  if (error) {\\n    console.error('Event error:', error);\\n  } else {\\n    console.log('Event data:', event.returnValues);\\n  }\\n});\"\n  }]\n}, {\n  \"topic_name\": \"Gas and Gas Price\",\n  \"topic_description\": \"When sending transactions on Ethereum, you need to specify gas and gas prices. Web3.js provides functions to estimate gas and get gas prices.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Estimating Gas\",\n    \"example_code\": \"web3.eth.estimateGas({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n})\\n.then(gasEstimate => console.log('Gas Estimate:', gasEstimate));\"\n  }, {\n    \"subtopic_name\": \"Getting Gas Price\",\n    \"example_code\": \"web3.eth.getGasPrice()\\n  .then(gasPrice => console.log('Gas Price:', gasPrice));\"\n  }]\n}, {\n  \"topic_name\": \"Web3 Providers\",\n  \"topic_description\": \"Web3.js supports various providers for connecting to Ethereum. Infura, MetaMask, and local nodes are common choices.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Using Infura Provider\",\n    \"example_code\": \"const web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\n  }, {\n    \"subtopic_name\": \"Using MetaMask Provider\",\n    \"example_code\": \"if (window.ethereum) {\\n  const web3 = new Web3(window.ethereum);\\n  try {\\n    // Request account access if needed\\n    await window.ethereum.enable();\\n  } catch (error) {\\n    // User denied account access\\n  }\\n}\"\n  }, {\n    \"subtopic_name\": \"Using Local Node Provider\",\n    \"example_code\": \"const web3 = new Web3('http://localhost:8545');\"\n  }]\n}, {\n  \"topic_name\": \"Working with Tokens\",\n  \"topic_description\": \"Ethereum-based tokens (ERC-20, ERC-721, etc.) can be managed using web3.js to transfer, check balances, and interact with token contracts.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Transferring Tokens\",\n    \"example_code\": \"// Create a token contract instance\\nconst tokenContract = new web3.eth.Contract(abi, tokenAddress);\\n\\n// Transfer tokens\\ntokenContract.methods.transfer(toAddress, amount).send({ from: accountAddress });\"\n  }, {\n    \"subtopic_name\": \"Checking Token Balance\",\n    \"example_code\": \"// Create a token contract instance\\nconst tokenContract = new web3.eth.Contract(abi, tokenAddress);\\n\\n// Check token balance\\ntokenContract.methods.balanceOf(accountAddress).call().then(balance => console.log('Token Balance:', balance));\"\n  }]\n}, {\n  \"topic_name\": \"Working with IPFS\",\n  \"topic_description\": \"InterPlanetary File System (IPFS) can be integrated with web3.js to store and retrieve data on a decentralized network.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Uploading Data to IPFS\",\n    \"example_code\": \"const ipfs = ipfsClient('localhost', '5001');\\n\\nipfs.add(Buffer.from('Hello, IPFS!'), (err, result) => {\\n  if (err) {\\n    console.error('IPFS upload error:', err);\\n  } else {\\n    console.log('IPFS Hash:', result[0].hash);\\n  }\\n});\"\n  }, {\n    \"subtopic_name\": \"Retrieving Data from IPFS\",\n    \"example_code\": \"const ipfs = ipfsClient('localhost', '5001');\\n\\nipfs.cat(ipfsHash, (err, data) => {\\n  if (err) {\\n    console.error('IPFS retrieval error:', err);\\n  } else {\\n    console.log('IPFS Data:', data.toString());\\n  }\\n});\"\n  }]\n}, {\n  \"topic_name\": \"Security Best Practices\",\n  \"topic_description\": \"When working with web3.js and Ethereum, it's important to follow security best practices to protect your assets and applications.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Protecting Private Keys\",\n    \"example_code\": \"Never expose or share your private keys with anyone. Use hardware wallets or secure key management solutions.\"\n  }, {\n    \"subtopic_name\": \"Avoiding Scams\",\n    \"example_code\": \"Be cautious of phishing websites, scams, and fraudulent smart contracts. Verify contract addresses and use trusted sources.\"\n  }, {\n    \"subtopic_name\": \"Testing on Testnets\",\n    \"example_code\": \"Before deploying to the mainnet, test your smart contracts and applications on Ethereum testnets to ensure functionality and security.\"\n  }]\n}, {\n  \"topic_name\": \"Working with Nonces\",\n  \"topic_description\": \"A nonce is a number used to prevent transaction replay attacks. Web3.js provides methods for managing nonces when sending transactions.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Getting Account Nonce\",\n    \"example_code\": \"web3.eth.getTransactionCount(accountAddress, 'latest')\\n  .then(nonce => console.log('Account Nonce:', nonce));\"\n  }, {\n    \"subtopic_name\": \"Using Nonce in Transactions\",\n    \"example_code\": \"const nonce = web3.utils.toHex(nonceValue);\\n\\nconst txObject = {\\n  nonce: nonce,\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n};\\n\\nweb3.eth.sendTransaction(txObject);\"\n  }]\n}, {\n  \"topic_name\": \"Working with Promises\",\n  \"topic_description\": \"Web3.js extensively uses Promises for asynchronous operations. Understanding Promises is essential for handling Ethereum interactions.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Using async/await\",\n    \"example_code\": \"async function example() {\\n  const balance = await web3.eth.getBalance(accountAddress);\\n  console.log('Account Balance:', balance);\\n}\"\n  }, {\n    \"subtopic_name\": \"Handling Promise Errors\",\n    \"example_code\": \"web3.eth.getBalance(accountAddress)\\n  .then(balance => console.log('Account Balance:', balance))\\n  .catch(error => console.error('Error:', error));\"\n  }]\n}, {\n  \"topic_name\": \"Working with BigNumber\",\n  \"topic_description\": \"BigNumber.js is used to handle large numbers like Ethereum wei values. Web3.js provides utils for converting between BigNumber and wei.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Converting to Wei\",\n    \"example_code\": \"const weiValue = web3.utils.toWei('1', 'ether');\"\n  }, {\n    \"subtopic_name\": \"Converting from Wei\",\n    \"example_code\": \"const etherValue = web3.utils.fromWei(weiValue, 'ether');\"\n  }]\n}, {\n  \"topic_name\": \"Working with Ethereum Name Service (ENS)\",\n  \"topic_description\": \"ENS allows human-readable names for Ethereum addresses. Web3.js provides methods for interacting with ENS.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Resolving ENS Names\",\n    \"example_code\": \"web3.eth.ens.getAddress('example.eth')\\n  .then(address => console.log('Resolved Address:', address));\"\n  }, {\n    \"subtopic_name\": \"Registering ENS Names\",\n    \"example_code\": \"const ensContract = new web3.eth.Contract(ensAbi, ensAddress);\\n\\nensContract.methods.register('yourname.eth', accountAddress).send({ from: accountAddress });\"\n  }]\n}, {\n  \"topic_name\": \"Working with Gas Limits\",\n  \"topic_description\": \"Ethereum transactions require specifying gas limits. Web3.js provides methods for estimating and setting gas limits.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Estimating Gas Limits\",\n    \"example_code\": \"web3.eth.estimateGas({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  data: contractData\\n})\\n.then(gasLimit => console.log('Estimated Gas Limit:', gasLimit));\"\n  }, {\n    \"subtopic_name\": \"Setting Custom Gas Limits\",\n    \"example_code\": \"const txObject = {\\n  gas: web3.utils.toHex(customGasLimit)\\n};\\n\\nweb3.eth.sendTransaction(txObject);\"\n  }]\n}, {\n  \"topic_name\": \"Web3.js Providers\",\n  \"topic_description\": \"Web3.js supports various providers, including HTTP, WebSocket, and custom providers for connecting to Ethereum nodes.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"HTTP Provider\",\n    \"example_code\": \"const web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\n  }, {\n    \"subtopic_name\": \"WebSocket Provider\",\n    \"example_code\": \"const web3 = new Web3('wss://mainnet.infura.io/ws/v3/your-infura-api-key');\"\n  }, {\n    \"subtopic_name\": \"Custom Provider\",\n    \"example_code\": \"const customProvider = new Web3.providers.HttpProvider('http://localhost:8545');\\nconst web3 = new Web3(customProvider);\"\n  }]\n}, {\n  \"topic_name\": \"Handling Contract Events\",\n  \"topic_description\": \"Ethereum smart contracts emit events, and web3.js allows you to subscribe to and handle these events in real-time.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Subscribing to Events\",\n    \"example_code\": \"const event = contract.events.MyEvent();\\n\\nevent.on('data', (eventData) => {\\n  console.log('Event Data:', eventData.returnValues);\\n}).on('error', console.error);\"\n  }, {\n    \"subtopic_name\": \"Unsubscribing from Events\",\n    \"example_code\": \"event.unsubscribe((error, success) => {\\n  if (error) {\\n    console.error('Unsubscribe Error:', error);\\n  } else if (success) {\\n    console.log('Unsubscribed from event');\\n  }\\n});\"\n  }]\n}, {\n  \"topic_name\": \"Working with Private Ethereum Networks\",\n  \"topic_description\": \"Developers often use private Ethereum networks for testing and development. Web3.js can connect to private networks.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Connecting to Private Network\",\n    \"example_code\": \"const web3 = new Web3('http://localhost:8545');\"\n  }, {\n    \"subtopic_name\": \"Configuring Custom Network\",\n    \"example_code\": \"const customProvider = new Web3.providers.HttpProvider('http://localhost:8545');\\nconst web3 = new Web3(customProvider);\"\n  }]\n}, {\n  \"topic_name\": \"Managing Ethereum Accounts\",\n  \"topic_description\": \"Web3.js allows you to manage Ethereum accounts, including creating, importing, and exporting accounts.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Creating an Account\",\n    \"example_code\": \"const newAccount = web3.eth.accounts.create();\"\n  }, {\n    \"subtopic_name\": \"Importing an Account\",\n    \"example_code\": \"const privateKey = 'your-private-key';\\nconst importedAccount = web3.eth.accounts.privateKeyToAccount(privateKey);\"\n  }, {\n    \"subtopic_name\": \"Exporting an Account\",\n    \"example_code\": \"const account = web3.eth.accounts[0];\\nconst privateKey = account.privateKey;\"\n  }]\n}, {\n  \"topic_name\": \"Ethereum Gas Price\",\n  \"topic_description\": \"Gas price determines the transaction cost on the Ethereum network. Web3.js provides methods to query and set gas prices.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Getting Current Gas Price\",\n    \"example_code\": \"web3.eth.getGasPrice()\\n  .then(gasPrice => console.log('Gas Price:', gasPrice));\"\n  }, {\n    \"subtopic_name\": \"Setting Custom Gas Price\",\n    \"example_code\": \"const customGasPrice = web3.utils.toWei('50', 'gwei');\\nconst txObject = {\\n  gasPrice: customGasPrice\\n};\\n\\nweb3.eth.sendTransaction(txObject);\"\n  }]\n}, {\n  \"topic_name\": \"Managing Ethereum Keys\",\n  \"topic_description\": \"Securely managing Ethereum keys is crucial. Web3.js can help with key generation and encryption.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Generating a Key Pair\",\n    \"example_code\": \"const keyPair = web3.eth.accounts.create();\"\n  }, {\n    \"subtopic_name\": \"Encrypting Private Key\",\n    \"example_code\": \"const encryptedPrivateKey = web3.eth.accounts.encrypt(privateKey, password);\"\n  }, {\n    \"subtopic_name\": \"Decrypting Private Key\",\n    \"example_code\": \"const decryptedAccount = web3.eth.accounts.decrypt(encryptedAccount, password);\"\n  }]\n}, {\n  \"topic_name\": \"Ethereum Contract Deployment\",\n  \"topic_description\": \"Web3.js allows you to deploy Ethereum smart contracts to the blockchain, specifying constructor arguments and gas limits.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Deploying a Contract\",\n    \"example_code\": \"const contract = new web3.eth.Contract(abi);\\n\\nconst deploy = contract.deploy({\\n  data: bytecode,\\n  arguments: [arg1, arg2]\\n});\\n\\ndeploy.send({\\n  from: senderAddress,\\n  gas: gasLimit\\n}).then(deployedContract => console.log('Contract Address:', deployedContract.options.address));\"\n  }]\n}, {\n  \"topic_name\": \"Ethereum Smart Contract Interaction\",\n  \"topic_description\": \"Web3.js enables interaction with Ethereum smart contracts, including calling functions and sending transactions.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Calling a Contract Function\",\n    \"example_code\": \"const contract = new web3.eth.Contract(abi, contractAddress);\\n\\ncontract.methods.myFunction(arg1, arg2).call()\\n  .then(result => console.log('Function Result:', result));\"\n  }, {\n    \"subtopic_name\": \"Sending a Transaction to a Contract\",\n    \"example_code\": \"const contract = new web3.eth.Contract(abi, contractAddress);\\n\\ncontract.methods.myFunction(arg1, arg2).send({\\n  from: senderAddress,\\n  gas: gasLimit\\n}).then(receipt => console.log('Transaction Receipt:', receipt));\"\n  }]\n}, {\n  \"topic_name\": \"Managing Ethereum Transactions\",\n  \"topic_description\": \"Web3.js allows you to create and manage Ethereum transactions, including nonce management and transaction signing.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Creating a Transaction\",\n    \"example_code\": \"const txObject = {\\n  nonce: nonceValue,\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether'),\\n  gas: gasLimit,\\n  gasPrice: gasPrice\\n};\\n\\nweb3.eth.sendTransaction(txObject);\"\n  }, {\n    \"subtopic_name\": \"Signing a Transaction\",\n    \"example_code\": \"web3.eth.accounts.signTransaction(txObject, privateKey)\\n  .then(signedTx => web3.eth.sendSignedTransaction(signedTx.rawTransaction))\\n  .then(receipt => console.log('Transaction Receipt:', receipt));\"\n  }]\n}, {\n  \"topic_name\": \"Ethereum Wallet Integration\",\n  \"topic_description\": \"Web3.js can be integrated with Ethereum wallet providers like MetaMask for seamless user interaction.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"MetaMask Integration\",\n    \"example_code\": \"if (window.ethereum) {\\n  const web3 = new Web3(window.ethereum);\\n  try {\\n    // Request account access if needed\\n    await window.ethereum.enable();\\n  } catch (error) {\\n    // User denied account access\\n  }\\n}\"\n  }, {\n    \"subtopic_name\": \"WalletConnect Integration\",\n    \"example_code\": \"const web3 = new Web3(new Web3.providers.WalletConnectProvider({\\n  rpc: { 1: 'https://mainnet.infura.io/v3/your-infura-api-key' }\\n}));\"\n  }]\n}, {\n  \"topic_name\": \"Working with Ethereum Signatures\",\n  \"topic_description\": \"Web3.js allows you to sign and verify Ethereum messages and transactions using cryptographic signatures.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Signing a Message\",\n    \"example_code\": \"const message = 'Hello, Ethereum!';\\nconst signature = web3.eth.accounts.sign(message, privateKey);\\nconsole.log('Message Signature:', signature.signature);\"\n  }, {\n    \"subtopic_name\": \"Verifying a Signature\",\n    \"example_code\": \"const valid = web3.eth.accounts.recover(message, signature.signature) === signerAddress;\\nconsole.log('Signature Valid:', valid);\"\n  }]\n}];\nexport default Web3jsCourseData;","map":{"version":3,"names":["subj","Web3jsCourseData"],"sources":["D:/Projects/educationWebsite/education-website/src/CoursesFolder/Web3js/Web3jsCourseData.js"],"sourcesContent":["export var subj\r\nvar Web3jsCourseData = [\r\n    {\r\n        \"topic_name\": \"Introduction to web3.js\",\r\n        \"topic_description\": \"Web3.js is a JavaScript library for interacting with the Ethereum blockchain. It allows developers to build decentralized applications (DApps) and interact with smart contracts.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Installing web3.js\",\r\n                \"example_code\": \"// Install web3.js using npm\\nnpm install web3\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Importing web3.js\",\r\n                \"example_code\": \"const Web3 = require('web3');\\nconst web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Connecting to Ethereum\",\r\n        \"topic_description\": \"To interact with the Ethereum blockchain, you need to connect to an Ethereum node. Infura is a popular choice for connecting to Ethereum without running a local node.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Connecting to Infura\",\r\n                \"example_code\": \"const web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Checking Connection\",\r\n                \"example_code\": \"web3.eth.net.isListening()\\n  .then(console.log)\\n  .catch(console.error);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Account Management\",\r\n        \"topic_description\": \"Web3.js provides functions for managing Ethereum accounts, including creating, unlocking, and listing accounts.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Creating an Account\",\r\n                \"example_code\": \"const newAccount = web3.eth.accounts.create();\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Unlocking an Account\",\r\n                \"example_code\": \"web3.eth.personal.unlockAccount(address, password, durationInSeconds);\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Listing Accounts\",\r\n                \"example_code\": \"web3.eth.getAccounts()\\n  .then(console.log)\\n  .catch(console.error);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Sending Ether\",\r\n        \"topic_description\": \"You can use web3.js to send Ether (ETH) from one account to another. This is commonly used for transactions and payments.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Sending Ether\",\r\n                \"example_code\": \"web3.eth.sendTransaction({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n})\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Checking Ether Balance\",\r\n                \"example_code\": \"web3.eth.getBalance(address)\\n  .then(balance => {\\n    const etherBalance = web3.utils.fromWei(balance, 'ether');\\n    console.log(`Balance: ${etherBalance} ETH`);\\n  })\\n  .catch(console.error);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Smart Contracts\",\r\n        \"topic_description\": \"Web3.js allows you to deploy and interact with smart contracts on the Ethereum blockchain.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Deploying a Smart Contract\",\r\n                \"example_code\": \"// Create a contract object with ABI and bytecode\\nconst contract = new web3.eth.Contract(abi);\\n\\n// Deploy the contract\\ncontract.deploy({\\n  data: '0x' + bytecode,\\n  arguments: [arg1, arg2]\\n})\\n.send({\\n  from: accountAddress,\\n  gas: 2000000\\n})\\n.then(newContract => {\\n  console.log('Contract deployed at:', newContract.options.address);\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Interacting with a Smart Contract\",\r\n                \"example_code\": \"// Create a contract instance with ABI and contract address\\nconst contract = new web3.eth.Contract(abi, contractAddress);\\n\\n// Call a contract function\\ncontract.methods.someFunction(arg1, arg2)\\n.call({ from: accountAddress })\\n.then(result => console.log('Function result:', result));\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Transaction Handling\",\r\n        \"topic_description\": \"Web3.js allows you to send transactions, check transaction status, and get transaction receipts.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Sending a Transaction\",\r\n                \"example_code\": \"web3.eth.sendTransaction({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n})\\n.on('transactionHash', hash => console.log('Transaction Hash:', hash))\\n.on('receipt', receipt => console.log('Transaction Receipt:', receipt));\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Checking Transaction Status\",\r\n                \"example_code\": \"web3.eth.getTransactionReceipt(transactionHash)\\n  .then(receipt => {\\n    if (receipt && receipt.status) {\\n      console.log('Transaction succeeded');\\n    } else if (receipt) {\\n      console.log('Transaction failed');\\n    } else {\\n      console.log('Transaction not mined');\\n    }\\n  })\\n  .catch(console.error);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Events\",\r\n        \"topic_description\": \"Ethereum smart contracts emit events, and web3.js allows you to listen for and handle these events.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Listening for Events\",\r\n                \"example_code\": \"// Create a contract instance with ABI and contract address\\nconst contract = new web3.eth.Contract(abi, contractAddress);\\n\\n// Listen for an event\\ncontract.events.MyEvent({\\n  fromBlock: 0,\\n  toBlock: 'latest'\\n}, (error, event) => {\\n  if (error) {\\n    console.error('Event error:', error);\\n  } else {\\n    console.log('Event data:', event.returnValues);\\n  }\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Gas and Gas Price\",\r\n        \"topic_description\": \"When sending transactions on Ethereum, you need to specify gas and gas prices. Web3.js provides functions to estimate gas and get gas prices.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Estimating Gas\",\r\n                \"example_code\": \"web3.eth.estimateGas({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n})\\n.then(gasEstimate => console.log('Gas Estimate:', gasEstimate));\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Getting Gas Price\",\r\n                \"example_code\": \"web3.eth.getGasPrice()\\n  .then(gasPrice => console.log('Gas Price:', gasPrice));\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Web3 Providers\",\r\n        \"topic_description\": \"Web3.js supports various providers for connecting to Ethereum. Infura, MetaMask, and local nodes are common choices.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Using Infura Provider\",\r\n                \"example_code\": \"const web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using MetaMask Provider\",\r\n                \"example_code\": \"if (window.ethereum) {\\n  const web3 = new Web3(window.ethereum);\\n  try {\\n    // Request account access if needed\\n    await window.ethereum.enable();\\n  } catch (error) {\\n    // User denied account access\\n  }\\n}\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using Local Node Provider\",\r\n                \"example_code\": \"const web3 = new Web3('http://localhost:8545');\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Working with Tokens\",\r\n        \"topic_description\": \"Ethereum-based tokens (ERC-20, ERC-721, etc.) can be managed using web3.js to transfer, check balances, and interact with token contracts.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Transferring Tokens\",\r\n                \"example_code\": \"// Create a token contract instance\\nconst tokenContract = new web3.eth.Contract(abi, tokenAddress);\\n\\n// Transfer tokens\\ntokenContract.methods.transfer(toAddress, amount).send({ from: accountAddress });\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Checking Token Balance\",\r\n                \"example_code\": \"// Create a token contract instance\\nconst tokenContract = new web3.eth.Contract(abi, tokenAddress);\\n\\n// Check token balance\\ntokenContract.methods.balanceOf(accountAddress).call().then(balance => console.log('Token Balance:', balance));\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Working with IPFS\",\r\n        \"topic_description\": \"InterPlanetary File System (IPFS) can be integrated with web3.js to store and retrieve data on a decentralized network.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Uploading Data to IPFS\",\r\n                \"example_code\": \"const ipfs = ipfsClient('localhost', '5001');\\n\\nipfs.add(Buffer.from('Hello, IPFS!'), (err, result) => {\\n  if (err) {\\n    console.error('IPFS upload error:', err);\\n  } else {\\n    console.log('IPFS Hash:', result[0].hash);\\n  }\\n});\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Retrieving Data from IPFS\",\r\n                \"example_code\": \"const ipfs = ipfsClient('localhost', '5001');\\n\\nipfs.cat(ipfsHash, (err, data) => {\\n  if (err) {\\n    console.error('IPFS retrieval error:', err);\\n  } else {\\n    console.log('IPFS Data:', data.toString());\\n  }\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Security Best Practices\",\r\n        \"topic_description\": \"When working with web3.js and Ethereum, it's important to follow security best practices to protect your assets and applications.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Protecting Private Keys\",\r\n                \"example_code\": \"Never expose or share your private keys with anyone. Use hardware wallets or secure key management solutions.\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Avoiding Scams\",\r\n                \"example_code\": \"Be cautious of phishing websites, scams, and fraudulent smart contracts. Verify contract addresses and use trusted sources.\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Testing on Testnets\",\r\n                \"example_code\": \"Before deploying to the mainnet, test your smart contracts and applications on Ethereum testnets to ensure functionality and security.\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Working with Nonces\",\r\n        \"topic_description\": \"A nonce is a number used to prevent transaction replay attacks. Web3.js provides methods for managing nonces when sending transactions.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Getting Account Nonce\",\r\n                \"example_code\": \"web3.eth.getTransactionCount(accountAddress, 'latest')\\n  .then(nonce => console.log('Account Nonce:', nonce));\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using Nonce in Transactions\",\r\n                \"example_code\": \"const nonce = web3.utils.toHex(nonceValue);\\n\\nconst txObject = {\\n  nonce: nonce,\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether')\\n};\\n\\nweb3.eth.sendTransaction(txObject);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Working with Promises\",\r\n        \"topic_description\": \"Web3.js extensively uses Promises for asynchronous operations. Understanding Promises is essential for handling Ethereum interactions.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Using async/await\",\r\n                \"example_code\": \"async function example() {\\n  const balance = await web3.eth.getBalance(accountAddress);\\n  console.log('Account Balance:', balance);\\n}\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Handling Promise Errors\",\r\n                \"example_code\": \"web3.eth.getBalance(accountAddress)\\n  .then(balance => console.log('Account Balance:', balance))\\n  .catch(error => console.error('Error:', error));\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Working with BigNumber\",\r\n        \"topic_description\": \"BigNumber.js is used to handle large numbers like Ethereum wei values. Web3.js provides utils for converting between BigNumber and wei.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Converting to Wei\",\r\n                \"example_code\": \"const weiValue = web3.utils.toWei('1', 'ether');\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Converting from Wei\",\r\n                \"example_code\": \"const etherValue = web3.utils.fromWei(weiValue, 'ether');\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Working with Ethereum Name Service (ENS)\",\r\n        \"topic_description\": \"ENS allows human-readable names for Ethereum addresses. Web3.js provides methods for interacting with ENS.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Resolving ENS Names\",\r\n                \"example_code\": \"web3.eth.ens.getAddress('example.eth')\\n  .then(address => console.log('Resolved Address:', address));\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Registering ENS Names\",\r\n                \"example_code\": \"const ensContract = new web3.eth.Contract(ensAbi, ensAddress);\\n\\nensContract.methods.register('yourname.eth', accountAddress).send({ from: accountAddress });\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Working with Gas Limits\",\r\n        \"topic_description\": \"Ethereum transactions require specifying gas limits. Web3.js provides methods for estimating and setting gas limits.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Estimating Gas Limits\",\r\n                \"example_code\": \"web3.eth.estimateGas({\\n  from: senderAddress,\\n  to: recipientAddress,\\n  data: contractData\\n})\\n.then(gasLimit => console.log('Estimated Gas Limit:', gasLimit));\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Setting Custom Gas Limits\",\r\n                \"example_code\": \"const txObject = {\\n  gas: web3.utils.toHex(customGasLimit)\\n};\\n\\nweb3.eth.sendTransaction(txObject);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Web3.js Providers\",\r\n        \"topic_description\": \"Web3.js supports various providers, including HTTP, WebSocket, and custom providers for connecting to Ethereum nodes.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"HTTP Provider\",\r\n                \"example_code\": \"const web3 = new Web3('https://mainnet.infura.io/v3/your-infura-api-key');\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"WebSocket Provider\",\r\n                \"example_code\": \"const web3 = new Web3('wss://mainnet.infura.io/ws/v3/your-infura-api-key');\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Custom Provider\",\r\n                \"example_code\": \"const customProvider = new Web3.providers.HttpProvider('http://localhost:8545');\\nconst web3 = new Web3(customProvider);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Handling Contract Events\",\r\n        \"topic_description\": \"Ethereum smart contracts emit events, and web3.js allows you to subscribe to and handle these events in real-time.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Subscribing to Events\",\r\n                \"example_code\": \"const event = contract.events.MyEvent();\\n\\nevent.on('data', (eventData) => {\\n  console.log('Event Data:', eventData.returnValues);\\n}).on('error', console.error);\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Unsubscribing from Events\",\r\n                \"example_code\": \"event.unsubscribe((error, success) => {\\n  if (error) {\\n    console.error('Unsubscribe Error:', error);\\n  } else if (success) {\\n    console.log('Unsubscribed from event');\\n  }\\n});\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Working with Private Ethereum Networks\",\r\n        \"topic_description\": \"Developers often use private Ethereum networks for testing and development. Web3.js can connect to private networks.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Connecting to Private Network\",\r\n                \"example_code\": \"const web3 = new Web3('http://localhost:8545');\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Configuring Custom Network\",\r\n                \"example_code\": \"const customProvider = new Web3.providers.HttpProvider('http://localhost:8545');\\nconst web3 = new Web3(customProvider);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Managing Ethereum Accounts\",\r\n        \"topic_description\": \"Web3.js allows you to manage Ethereum accounts, including creating, importing, and exporting accounts.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Creating an Account\",\r\n                \"example_code\": \"const newAccount = web3.eth.accounts.create();\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Importing an Account\",\r\n                \"example_code\": \"const privateKey = 'your-private-key';\\nconst importedAccount = web3.eth.accounts.privateKeyToAccount(privateKey);\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Exporting an Account\",\r\n                \"example_code\": \"const account = web3.eth.accounts[0];\\nconst privateKey = account.privateKey;\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Ethereum Gas Price\",\r\n        \"topic_description\": \"Gas price determines the transaction cost on the Ethereum network. Web3.js provides methods to query and set gas prices.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Getting Current Gas Price\",\r\n                \"example_code\": \"web3.eth.getGasPrice()\\n  .then(gasPrice => console.log('Gas Price:', gasPrice));\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Setting Custom Gas Price\",\r\n                \"example_code\": \"const customGasPrice = web3.utils.toWei('50', 'gwei');\\nconst txObject = {\\n  gasPrice: customGasPrice\\n};\\n\\nweb3.eth.sendTransaction(txObject);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Managing Ethereum Keys\",\r\n        \"topic_description\": \"Securely managing Ethereum keys is crucial. Web3.js can help with key generation and encryption.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Generating a Key Pair\",\r\n                \"example_code\": \"const keyPair = web3.eth.accounts.create();\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Encrypting Private Key\",\r\n                \"example_code\": \"const encryptedPrivateKey = web3.eth.accounts.encrypt(privateKey, password);\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Decrypting Private Key\",\r\n                \"example_code\": \"const decryptedAccount = web3.eth.accounts.decrypt(encryptedAccount, password);\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Ethereum Contract Deployment\",\r\n        \"topic_description\": \"Web3.js allows you to deploy Ethereum smart contracts to the blockchain, specifying constructor arguments and gas limits.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Deploying a Contract\",\r\n                \"example_code\": \"const contract = new web3.eth.Contract(abi);\\n\\nconst deploy = contract.deploy({\\n  data: bytecode,\\n  arguments: [arg1, arg2]\\n});\\n\\ndeploy.send({\\n  from: senderAddress,\\n  gas: gasLimit\\n}).then(deployedContract => console.log('Contract Address:', deployedContract.options.address));\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Ethereum Smart Contract Interaction\",\r\n        \"topic_description\": \"Web3.js enables interaction with Ethereum smart contracts, including calling functions and sending transactions.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Calling a Contract Function\",\r\n                \"example_code\": \"const contract = new web3.eth.Contract(abi, contractAddress);\\n\\ncontract.methods.myFunction(arg1, arg2).call()\\n  .then(result => console.log('Function Result:', result));\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Sending a Transaction to a Contract\",\r\n                \"example_code\": \"const contract = new web3.eth.Contract(abi, contractAddress);\\n\\ncontract.methods.myFunction(arg1, arg2).send({\\n  from: senderAddress,\\n  gas: gasLimit\\n}).then(receipt => console.log('Transaction Receipt:', receipt));\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Managing Ethereum Transactions\",\r\n        \"topic_description\": \"Web3.js allows you to create and manage Ethereum transactions, including nonce management and transaction signing.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Creating a Transaction\",\r\n                \"example_code\": \"const txObject = {\\n  nonce: nonceValue,\\n  from: senderAddress,\\n  to: recipientAddress,\\n  value: web3.utils.toWei('1', 'ether'),\\n  gas: gasLimit,\\n  gasPrice: gasPrice\\n};\\n\\nweb3.eth.sendTransaction(txObject);\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Signing a Transaction\",\r\n                \"example_code\": \"web3.eth.accounts.signTransaction(txObject, privateKey)\\n  .then(signedTx => web3.eth.sendSignedTransaction(signedTx.rawTransaction))\\n  .then(receipt => console.log('Transaction Receipt:', receipt));\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Ethereum Wallet Integration\",\r\n        \"topic_description\": \"Web3.js can be integrated with Ethereum wallet providers like MetaMask for seamless user interaction.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"MetaMask Integration\",\r\n                \"example_code\": \"if (window.ethereum) {\\n  const web3 = new Web3(window.ethereum);\\n  try {\\n    // Request account access if needed\\n    await window.ethereum.enable();\\n  } catch (error) {\\n    // User denied account access\\n  }\\n}\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"WalletConnect Integration\",\r\n                \"example_code\": \"const web3 = new Web3(new Web3.providers.WalletConnectProvider({\\n  rpc: { 1: 'https://mainnet.infura.io/v3/your-infura-api-key' }\\n}));\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Working with Ethereum Signatures\",\r\n        \"topic_description\": \"Web3.js allows you to sign and verify Ethereum messages and transactions using cryptographic signatures.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Signing a Message\",\r\n                \"example_code\": \"const message = 'Hello, Ethereum!';\\nconst signature = web3.eth.accounts.sign(message, privateKey);\\nconsole.log('Message Signature:', signature.signature);\"\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Verifying a Signature\",\r\n                \"example_code\": \"const valid = web3.eth.accounts.recover(message, signature.signature) === signerAddress;\\nconsole.log('Signature Valid:', valid);\"\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nexport default Web3jsCourseData;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}