{"ast":null,"code":"var subjectName;\nvar ReactData = [{\n  \"topic_name\": \"React Components\",\n  \"topic_description\": \"React components are the building blocks of a React application. They are reusable, self-contained UI elements that manage their own state and can be composed to create complex user interfaces.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Functional Components\",\n    \"example_code\": `\nfunction MyComponent() {\n  return (\n    <div>\n      {/* JSX content */}\n    </div>\n  );\n}`\n  }, {\n    \"subtopic_name\": \"Class Components\",\n    \"example_code\": `\nclass MyComponent extends React.Component {\n  render() {\n    return (\n      <div>\n        {/* JSX content */}\n      </div>\n    );\n  }\n}`\n  }, {\n    \"subtopic_name\": \"Props\",\n    \"example_code\": `\nfunction Greeting(props) {\n  return <div>Hello, {props.name}!</div>;\n}\n\n<Greeting name=\"John\" />`\n  }, {\n    \"subtopic_name\": \"State\",\n    \"example_code\": `\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  render() {\n    return (\n      <div>\n        Count: {this.state.count}\n      </div>\n    );\n  }\n}`\n  }]\n}, {\n  \"topic_name\": \"JSX\",\n  \"topic_description\": \"JSX (JavaScript XML) is a syntax extension for JavaScript that allows you to write HTML-like code within your JavaScript files. It's the primary way to define React elements and their structure.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Element Rendering\",\n    \"example_code\": `\nconst element = <h1>Hello, React!</h1>;\nReactDOM.render(element, document.getElementById('root'));`\n  }, {\n    \"subtopic_name\": \"JSX Expressions\",\n    \"example_code\": `\nconst name = 'Alice';\nconst element = <p>Hello, {name}</p>;\nReactDOM.render(element, document.getElementById('root'));`\n  }, {\n    \"subtopic_name\": \"Self-Closing Tags\",\n    \"example_code\": `\nconst image = <img src=\"image.jpg\" alt=\"Image\" />;`\n  }]\n}, {\n  \"topic_name\": \"Props and PropTypes\",\n  \"topic_description\": \"Props are used to pass data from parent components to child components. PropTypes allow you to specify the expected data types for props, helping catch potential bugs.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Passing Props\",\n    \"example_code\": `\nfunction Welcome(props) {\n  return <p>Hello, {props.name}</p>;\n}\n\n<Welcome name=\"John\" />;`\n  }, {\n    \"subtopic_name\": \"PropTypes Validation\",\n    \"example_code\": `\nimport PropTypes from 'prop-types';\n\nfunction Greeting(props) {\n  return <p>Hello, {props.name}</p>;\n}\n\nGreeting.propTypes = {\n  name: PropTypes.string.isRequired,\n};`\n  }, {\n    \"subtopic_name\": \"Default Props\",\n    \"example_code\": `\nfunction Greeting(props) {\n  return <p>Hello, {props.name}</p>;\n}\n\nGreeting.defaultProps = {\n  name: 'Guest',\n};`\n  }]\n}, {\n  \"topic_name\": \"State and setState\",\n  \"topic_description\": \"State allows you to manage component-specific data that can change over time. The `setState` method is used to update the state of a component.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Initializing State\",\n    \"example_code\": `\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n}`\n  }, {\n    \"subtopic_name\": \"Updating State\",\n    \"example_code\": `\nclass Counter extends React.Component {\n  // ...\n\n  increment() {\n    this.setState({ count: this.state.count + 1 });\n  }\n}`\n  }, {\n    \"subtopic_name\": \"Async State Updates\",\n    \"example_code\": `\nclass Counter extends React.Component {\n  // ...\n\n  increment() {\n    this.setState((prevState) => ({\n      count: prevState.count + 1\n    }));\n  }\n}`\n  }]\n}, {\n  \"topic_name\": \"Lifecycle Methods\",\n  \"topic_description\": \"React components go through various lifecycle stages, such as mounting, updating, and unmounting. Lifecycle methods provide hooks to execute code at specific points in a component's lifecycle.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"componentDidMount\",\n    \"example_code\": `\nclass MyComponent extends React.Component {\n  componentDidMount() {\n    // Executed after component is added to the DOM\n  }\n\n  // ...\n}`\n  }, {\n    \"subtopic_name\": \"componentDidUpdate\",\n    \"example_code\": `\nclass MyComponent extends React.Component {\n  componentDidUpdate(prevProps, prevState) {\n    // Executed after component updates\n  }\n\n  // ...\n}`\n  }, {\n    \"subtopic_name\": \"componentWillUnmount\",\n    \"example_code\": `\nclass MyComponent extends React.Component {\n  componentWillUnmount() {\n    // Executed before component is removed from the DOM\n  }\n\n  // ...\n}`\n  }]\n}, {\n  \"topic_name\": \"Event Handling\",\n  \"topic_description\": \"React allows you to handle events like clicks, input changes, and more using event handlers defined within your components.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Handling Click Events\",\n    \"example_code\": `\nclass MyComponent extends React.Component {\n  handleClick() {\n    // Handle click event\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>Click Me</button>\n    );\n  }\n}`\n  }, {\n    \"subtopic_name\": \"Handling Input Changes\",\n    \"example_code\": `\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { inputValue: '' };\n  }\n\n  handleChange(event) {\n    this.setState({ inputValue: event.target.value });\n  }\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        value={this.state.inputValue}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}`\n  }]\n}, {\n  \"topic_name\": \"Conditional Rendering\",\n  \"topic_description\": \"React allows you to conditionally render components or elements based on certain conditions or user interactions.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Using Conditional (Ternary) Operators\",\n    \"example_code\": `\nfunction Greeting(props) {\n  return (\n    <div>\n      {props.isLoggedIn ? <p>Welcome back!</p> : <p>Please log in.</p>}\n    </div>\n  );\n}`\n  }, {\n    \"subtopic_name\": \"Using `if` Statements\",\n    \"example_code\": `\nfunction Greeting(props) {\n  if (props.isLoggedIn) {\n    return <p>Welcome back!</p>;\n  } else {\n    return <p>Please log in.</p>;\n  }\n}`\n  }]\n}, {\n  \"topic_name\": \"Lists and Keys\",\n  \"topic_description\": \"When rendering dynamic lists of elements in React, it's important to use unique keys to help React efficiently update and reorder elements.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Rendering Lists\",\n    \"example_code\": `\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li key={number.toString()}>{number}</li>\n  );\n  return <ul>{listItems}</ul>;\n}`\n  }, {\n    \"subtopic_name\": \"Keys and Reconciliation\",\n    \"example_code\": `\nfunction TodoList(props) {\n  const todos = props.todos;\n  const todoItems = todos.map((todo) =>\n    <Todo key={todo.id} todo={todo} />\n  );\n  return <ul>{todoItems}</ul>;\n}`\n  }]\n}, {\n  \"topic_name\": \"Forms and Controlled Components\",\n  \"topic_description\": \"React provides a way to create controlled form components where the form elements' values are controlled by React state.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Input Elements\",\n    \"example_code\": `\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input\n            type=\"text\"\n            value={this.state.value}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  }\n}`\n  }]\n}, {\n  \"topic_name\": \"React Router\",\n  \"topic_description\": \"React Router is a popular library for adding client-side routing to your React applications, enabling navigation between different views or pages.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Installing and Setup\",\n    \"example_code\": `\n// Install React Router using npm or yarn\nnpm install react-router-dom\n\n// Import necessary components and set up routes\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\n// Define routes using <Route> components\n<Router>\n  <nav>\n    <ul>\n      <li><Link to=\"/\">Home</Link></li>\n      <li><Link to=\"/about\">About</Link></li>\n    </ul>\n  </nav>\n  <Route path=\"/\" exact component={Home} />\n  <Route path=\"/about\" component={About} />\n</Router>`\n  }, {\n    \"subtopic_name\": \"Navigating Between Routes\",\n    \"example_code\": `\n// Use <Link> components to navigate between routes\n<Link to=\"/about\">About</Link>\n\n// Programmatically navigate using history\nthis.props.history.push('/about');`\n  }]\n}, {\n  \"topic_name\": \"React Context\",\n  \"topic_description\": \"React Context provides a way to pass data through the component tree without having to pass props down manually at every level. It's often used for managing application-level state.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Creating a Context\",\n    \"example_code\": `\n// Create a context\nconst MyContext = React.createContext();`\n  }, {\n    \"subtopic_name\": \"Providing and Consuming Context\",\n    \"example_code\": `\n// Provide context value at a higher level\n<MyContext.Provider value={/* value */}>\n  {/* Child components can consume the context */}\n  <MyContext.Consumer>\n    {value => /* render something based on value */}\n  </MyContext.Consumer>\n</MyContext.Provider>;`\n  }]\n}, {\n  \"topic_name\": \"Redux\",\n  \"topic_description\": \"Redux is a state management library for React applications. It helps manage the state of your application in a predictable and centralized manner.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Installing Redux\",\n    \"example_code\": `\n// Install Redux using npm or yarn\nnpm install redux react-redux\n\n// Create a Redux store and configure it\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);`\n  }, {\n    \"subtopic_name\": \"Actions and Reducers\",\n    \"example_code\": `\n// Define actions and reducers\nconst increment = () => ({ type: 'INCREMENT' });\n\nconst counterReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    default:\n      return state;\n  }\n};`\n  }, {\n    \"subtopic_name\": \"Connecting React Components\",\n    \"example_code\": `\n// Connect React components to the Redux store\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({\n  count: state\n});\n\nconst mapDispatchToProps = {\n  increment\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);`\n  }]\n}, {\n  \"topic_name\": \"React Hooks\",\n  \"topic_description\": \"React Hooks allow functional components to use state and other React features without writing a class. They provide a more concise and readable way to manage state and side effects.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"useState Hook\",\n    \"example_code\": `\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      Count: {count}\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}`\n  }, {\n    \"subtopic_name\": \"useEffect Hook\",\n    \"example_code\": `\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \\`Count: \\${count}\\`;\n  }, [count]);\n\n  return (\n    <div>\n      Count: {count}\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}`\n  }]\n}, {\n  \"topic_name\": \"Styling in React\",\n  \"topic_description\": \"Styling in React can be done using CSS, CSS modules, or popular CSS-in-JS libraries like styled-components or Emotion.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"CSS Stylesheets\",\n    \"example_code\": `\nimport './MyComponent.css';\n\nfunction MyComponent() {\n  return <div className=\"my-component\">Styled with CSS</div>;\n}`\n  }, {\n    \"subtopic_name\": \"CSS Modules\",\n    \"example_code\": `\nimport styles from './MyComponent.module.css';\n\nfunction MyComponent() {\n  return <div className={styles.myComponent}>Styled with CSS Modules</div>;\n}`\n  }, {\n    \"subtopic_name\": \"Styled-Components\",\n    \"example_code\": `\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div\\`\n  background-color: lightgray;\n\\`;\n\nfunction MyComponent() {\n  return <Wrapper>Styled with styled-components</Wrapper>;\n}`\n  }]\n}, {\n  \"topic_name\": \"Error Handling\",\n  \"topic_description\": \"React provides error boundaries, a way to gracefully handle errors that occur within the component tree and prevent the entire application from crashing.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Error Boundary Component\",\n    \"example_code\": `\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <div>Something went wrong.</div>;\n    }\n    return this.props.children;\n  }\n}`\n  }, {\n    \"subtopic_name\": \"Using Error Boundary\",\n    \"example_code\": `\n<ErrorBoundary>\n  <ComponentWithError />\n</ErrorBoundary>`\n  }]\n}, {\n  \"topic_name\": \"React Testing\",\n  \"topic_description\": \"Testing is an essential part of building reliable React applications. Tools like Jest and React Testing Library are commonly used for testing React components and applications.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Setting up Testing Environment\",\n    \"example_code\": `\n// Install Jest and React Testing Library\nnpm install --save-dev jest @testing-library/react @testing-library/jest-dom\n\n// Configure Jest in package.json or jest.config.js\n{\n  \"setupFilesAfterEnv\": [\"@testing-library/jest-dom/extend-expect\"]\n}`\n  }, {\n    \"subtopic_name\": \"Writing Component Tests\",\n    \"example_code\": `\nimport { render, screen } from '@testing-library/react';\nimport MyComponent from './MyComponent';\n\ntest('renders the component', () => {\n  render(<MyComponent />);\n  const element = screen.getByText('Hello, React!');\n  expect(element).toBeInTheDocument();\n});`\n  }]\n}, {\n  \"topic_name\": \"React Router\",\n  \"topic_description\": \"React Router is a popular library for adding client-side routing to your React applications, enabling navigation between different views or pages.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Installing and Setup\",\n    \"example_code\": `\n// Install React Router using npm or yarn\nnpm install react-router-dom\n\n// Import necessary components and set up routes\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\n// Define routes using <Route> components\n<Router>\n  <nav>\n    <ul>\n      <li><Link to=\"/\">Home</Link></li>\n      <li><Link to=\"/about\">About</Link></li>\n    </ul>\n  </nav>\n  <Route path=\"/\" exact component={Home} />\n  <Route path=\"/about\" component={About} />\n</Router>`\n  }, {\n    \"subtopic_name\": \"Navigating Between Routes\",\n    \"example_code\": `\n// Use <Link> components to navigate between routes\n<Link to=\"/about\">About</Link>\n\n// Programmatically navigate using history\nthis.props.history.push('/about');`\n  }]\n}, {\n  \"topic_name\": \"React Context\",\n  \"topic_description\": \"React Context provides a way to pass data through the component tree without having to pass props down manually at every level. It's often used for managing application-level state.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Creating a Context\",\n    \"example_code\": `\n// Create a context\nconst MyContext = React.createContext();`\n  }, {\n    \"subtopic_name\": \"Providing and Consuming Context\",\n    \"example_code\": `\n// Provide context value at a higher level\n<MyContext.Provider value={/* value */}>\n  {/* Child components can consume the context */}\n  <MyContext.Consumer>\n    {value => /* render something based on value */}\n  </MyContext.Consumer>\n</MyContext.Provider>;`\n  }]\n}, {\n  \"topic_name\": \"Redux\",\n  \"topic_description\": \"Redux is a state management library for React applications. It helps manage the state of your application in a predictable and centralized manner.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Installing Redux\",\n    \"example_code\": `\n// Install Redux using npm or yarn\nnpm install redux react-redux\n\n// Create a Redux store and configure it\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);`\n  }, {\n    \"subtopic_name\": \"Actions and Reducers\",\n    \"example_code\": `\n// Define actions and reducers\nconst increment = () => ({ type: 'INCREMENT' });\n\nconst counterReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    default:\n      return state;\n  }\n};`\n  }, {\n    \"subtopic_name\": \"Connecting React Components\",\n    \"example_code\": `\n// Connect React components to the Redux store\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({\n  count: state\n});\n\nconst mapDispatchToProps = {\n  increment\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);`\n  }]\n}, {\n  \"topic_name\": \"React Hooks\",\n  \"topic_description\": \"React Hooks allow functional components to use state and other React features without writing a class. They provide a more concise and readable way to manage state and side effects.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"useState Hook\",\n    \"example_code\": `\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      Count: {count}\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}`\n  }, {\n    \"subtopic_name\": \"useEffect Hook\",\n    \"example_code\": `\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \\`Count: \\${count}\\`;\n  }, [count]);\n\n  return (\n    <div>\n      Count: {count}\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}`\n  }]\n}, {\n  \"topic_name\": \"Styling in React\",\n  \"topic_description\": \"Styling in React can be done using CSS, CSS modules, or popular CSS-in-JS libraries like styled-components or Emotion.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"CSS Stylesheets\",\n    \"example_code\": `\nimport './MyComponent.css';\n\nfunction MyComponent() {\n  return <div className=\"my-component\">Styled with CSS</div>;\n}`\n  }, {\n    \"subtopic_name\": \"CSS Modules\",\n    \"example_code\": `\nimport styles from './MyComponent.module.css';\n\nfunction MyComponent() {\n  return <div className={styles.myComponent}>Styled with CSS Modules</div>;\n}`\n  }, {\n    \"subtopic_name\": \"Styled-Components\",\n    \"example_code\": `\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div\\`\n  background-color: lightgray;\n\\`;\n\nfunction MyComponent() {\n  return <Wrapper>Styled with styled-components</Wrapper>;\n}`\n  }]\n}, {\n  \"topic_name\": \"Error Handling\",\n  \"topic_description\": \"React provides error boundaries, a way to gracefully handle errors that occur within the component tree and prevent the entire application from crashing.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Error Boundary Component\",\n    \"example_code\": `\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <div>Something went wrong.</div>;\n    }\n    return this.props.children;\n  }\n}`\n  }, {\n    \"subtopic_name\": \"Using Error Boundary\",\n    \"example_code\": `\n<ErrorBoundary>\n  <ComponentWithError />\n</ErrorBoundary>`\n  }]\n}, {\n  \"topic_name\": \"React Testing\",\n  \"topic_description\": \"Testing is an essential part of building reliable React applications. Tools like Jest and React Testing Library are commonly used for testing React components and applications.\",\n  \"subtopics\": [{\n    \"subtopic_name\": \"Setting up Testing Environment\",\n    \"example_code\": `\n// Install Jest and React Testing Library\nnpm install --save-dev jest @testing-library/react @testing-library/jest-dom\n\n// Configure Jest in package.json or jest.config.js\n{\n  \"setupFilesAfterEnv\": [\"@testing-library/jest-dom/extend-expect\"]\n}`\n  }, {\n    \"subtopic_name\": \"Writing Component Tests\",\n    \"example_code\": `\nimport { render, screen } from '@testing-library/react';\nimport MyComponent from './MyComponent';\n\ntest('renders the component', () => {\n  render(<MyComponent />);\n  const element = screen.getByText('Hello, React!');\n  expect(element).toBeInTheDocument();\n});`\n  }]\n}];\n\n// console.log(JSON.stringify(reactCheatSheet, null, 2));\nexport default ReactData;","map":{"version":3,"names":["subjectName","ReactData"],"sources":["D:/Projects/educationWebsite/education-website/src/CoursesFolder/React/ReactCourseData.js"],"sourcesContent":["var subjectName\r\nvar ReactData = [\r\n    {\r\n        \"topic_name\": \"React Components\",\r\n        \"topic_description\": \"React components are the building blocks of a React application. They are reusable, self-contained UI elements that manage their own state and can be composed to create complex user interfaces.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Functional Components\",\r\n                \"example_code\": `\r\nfunction MyComponent() {\r\n  return (\r\n    <div>\r\n      {/* JSX content */}\r\n    </div>\r\n  );\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Class Components\",\r\n                \"example_code\": `\r\nclass MyComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* JSX content */}\r\n      </div>\r\n    );\r\n  }\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Props\",\r\n                \"example_code\": `\r\nfunction Greeting(props) {\r\n  return <div>Hello, {props.name}!</div>;\r\n}\r\n\r\n<Greeting name=\"John\" />`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"State\",\r\n                \"example_code\": `\r\nclass Counter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0 };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        Count: {this.state.count}\r\n      </div>\r\n    );\r\n  }\r\n}`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"JSX\",\r\n        \"topic_description\": \"JSX (JavaScript XML) is a syntax extension for JavaScript that allows you to write HTML-like code within your JavaScript files. It's the primary way to define React elements and their structure.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Element Rendering\",\r\n                \"example_code\": `\r\nconst element = <h1>Hello, React!</h1>;\r\nReactDOM.render(element, document.getElementById('root'));`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"JSX Expressions\",\r\n                \"example_code\": `\r\nconst name = 'Alice';\r\nconst element = <p>Hello, {name}</p>;\r\nReactDOM.render(element, document.getElementById('root'));`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Self-Closing Tags\",\r\n                \"example_code\": `\r\nconst image = <img src=\"image.jpg\" alt=\"Image\" />;`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Props and PropTypes\",\r\n        \"topic_description\": \"Props are used to pass data from parent components to child components. PropTypes allow you to specify the expected data types for props, helping catch potential bugs.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Passing Props\",\r\n                \"example_code\": `\r\nfunction Welcome(props) {\r\n  return <p>Hello, {props.name}</p>;\r\n}\r\n\r\n<Welcome name=\"John\" />;`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"PropTypes Validation\",\r\n                \"example_code\": `\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Greeting(props) {\r\n  return <p>Hello, {props.name}</p>;\r\n}\r\n\r\nGreeting.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Default Props\",\r\n                \"example_code\": `\r\nfunction Greeting(props) {\r\n  return <p>Hello, {props.name}</p>;\r\n}\r\n\r\nGreeting.defaultProps = {\r\n  name: 'Guest',\r\n};`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"State and setState\",\r\n        \"topic_description\": \"State allows you to manage component-specific data that can change over time. The `setState` method is used to update the state of a component.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Initializing State\",\r\n                \"example_code\": `\r\nclass Counter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0 };\r\n  }\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Updating State\",\r\n                \"example_code\": `\r\nclass Counter extends React.Component {\r\n  // ...\r\n\r\n  increment() {\r\n    this.setState({ count: this.state.count + 1 });\r\n  }\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Async State Updates\",\r\n                \"example_code\": `\r\nclass Counter extends React.Component {\r\n  // ...\r\n\r\n  increment() {\r\n    this.setState((prevState) => ({\r\n      count: prevState.count + 1\r\n    }));\r\n  }\r\n}`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Lifecycle Methods\",\r\n        \"topic_description\": \"React components go through various lifecycle stages, such as mounting, updating, and unmounting. Lifecycle methods provide hooks to execute code at specific points in a component's lifecycle.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"componentDidMount\",\r\n                \"example_code\": `\r\nclass MyComponent extends React.Component {\r\n  componentDidMount() {\r\n    // Executed after component is added to the DOM\r\n  }\r\n\r\n  // ...\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"componentDidUpdate\",\r\n                \"example_code\": `\r\nclass MyComponent extends React.Component {\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Executed after component updates\r\n  }\r\n\r\n  // ...\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"componentWillUnmount\",\r\n                \"example_code\": `\r\nclass MyComponent extends React.Component {\r\n  componentWillUnmount() {\r\n    // Executed before component is removed from the DOM\r\n  }\r\n\r\n  // ...\r\n}`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Event Handling\",\r\n        \"topic_description\": \"React allows you to handle events like clicks, input changes, and more using event handlers defined within your components.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Handling Click Events\",\r\n                \"example_code\": `\r\nclass MyComponent extends React.Component {\r\n  handleClick() {\r\n    // Handle click event\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button onClick={this.handleClick}>Click Me</button>\r\n    );\r\n  }\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Handling Input Changes\",\r\n                \"example_code\": `\r\nclass MyComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { inputValue: '' };\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ inputValue: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        value={this.state.inputValue}\r\n        onChange={this.handleChange}\r\n      />\r\n    );\r\n  }\r\n}`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Conditional Rendering\",\r\n        \"topic_description\": \"React allows you to conditionally render components or elements based on certain conditions or user interactions.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Using Conditional (Ternary) Operators\",\r\n                \"example_code\": `\r\nfunction Greeting(props) {\r\n  return (\r\n    <div>\r\n      {props.isLoggedIn ? <p>Welcome back!</p> : <p>Please log in.</p>}\r\n    </div>\r\n  );\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using `if` Statements\",\r\n                \"example_code\": `\r\nfunction Greeting(props) {\r\n  if (props.isLoggedIn) {\r\n    return <p>Welcome back!</p>;\r\n  } else {\r\n    return <p>Please log in.</p>;\r\n  }\r\n}`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Lists and Keys\",\r\n        \"topic_description\": \"When rendering dynamic lists of elements in React, it's important to use unique keys to help React efficiently update and reorder elements.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Rendering Lists\",\r\n                \"example_code\": `\r\nfunction NumberList(props) {\r\n  const numbers = props.numbers;\r\n  const listItems = numbers.map((number) =>\r\n    <li key={number.toString()}>{number}</li>\r\n  );\r\n  return <ul>{listItems}</ul>;\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Keys and Reconciliation\",\r\n                \"example_code\": `\r\nfunction TodoList(props) {\r\n  const todos = props.todos;\r\n  const todoItems = todos.map((todo) =>\r\n    <Todo key={todo.id} todo={todo} />\r\n  );\r\n  return <ul>{todoItems}</ul>;\r\n}`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Forms and Controlled Components\",\r\n        \"topic_description\": \"React provides a way to create controlled form components where the form elements' values are controlled by React state.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Input Elements\",\r\n                \"example_code\": `\r\nclass NameForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: '' };\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert('A name was submitted: ' + this.state.value);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name:\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.value}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"React Router\",\r\n        \"topic_description\": \"React Router is a popular library for adding client-side routing to your React applications, enabling navigation between different views or pages.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Installing and Setup\",\r\n                \"example_code\": `\r\n// Install React Router using npm or yarn\r\nnpm install react-router-dom\r\n\r\n// Import necessary components and set up routes\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\n// Define routes using <Route> components\r\n<Router>\r\n  <nav>\r\n    <ul>\r\n      <li><Link to=\"/\">Home</Link></li>\r\n      <li><Link to=\"/about\">About</Link></li>\r\n    </ul>\r\n  </nav>\r\n  <Route path=\"/\" exact component={Home} />\r\n  <Route path=\"/about\" component={About} />\r\n</Router>`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Navigating Between Routes\",\r\n                \"example_code\": `\r\n// Use <Link> components to navigate between routes\r\n<Link to=\"/about\">About</Link>\r\n\r\n// Programmatically navigate using history\r\nthis.props.history.push('/about');`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"React Context\",\r\n        \"topic_description\": \"React Context provides a way to pass data through the component tree without having to pass props down manually at every level. It's often used for managing application-level state.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Creating a Context\",\r\n                \"example_code\": `\r\n// Create a context\r\nconst MyContext = React.createContext();`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Providing and Consuming Context\",\r\n                \"example_code\": `\r\n// Provide context value at a higher level\r\n<MyContext.Provider value={/* value */}>\r\n  {/* Child components can consume the context */}\r\n  <MyContext.Consumer>\r\n    {value => /* render something based on value */}\r\n  </MyContext.Consumer>\r\n</MyContext.Provider>;`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Redux\",\r\n        \"topic_description\": \"Redux is a state management library for React applications. It helps manage the state of your application in a predictable and centralized manner.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Installing Redux\",\r\n                \"example_code\": `\r\n// Install Redux using npm or yarn\r\nnpm install redux react-redux\r\n\r\n// Create a Redux store and configure it\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(rootReducer);`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Actions and Reducers\",\r\n                \"example_code\": `\r\n// Define actions and reducers\r\nconst increment = () => ({ type: 'INCREMENT' });\r\n\r\nconst counterReducer = (state = 0, action) => {\r\n  switch (action.type) {\r\n    case 'INCREMENT':\r\n      return state + 1;\r\n    default:\r\n      return state;\r\n  }\r\n};`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Connecting React Components\",\r\n                \"example_code\": `\r\n// Connect React components to the Redux store\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => ({\r\n  count: state\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  increment\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"React Hooks\",\r\n        \"topic_description\": \"React Hooks allow functional components to use state and other React features without writing a class. They provide a more concise and readable way to manage state and side effects.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"useState Hook\",\r\n                \"example_code\": `\r\nimport React, { useState } from 'react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      Count: {count}\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"useEffect Hook\",\r\n                \"example_code\": `\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction Example() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    document.title = \\`Count: \\${count}\\`;\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      Count: {count}\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Styling in React\",\r\n        \"topic_description\": \"Styling in React can be done using CSS, CSS modules, or popular CSS-in-JS libraries like styled-components or Emotion.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"CSS Stylesheets\",\r\n                \"example_code\": `\r\nimport './MyComponent.css';\r\n\r\nfunction MyComponent() {\r\n  return <div className=\"my-component\">Styled with CSS</div>;\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"CSS Modules\",\r\n                \"example_code\": `\r\nimport styles from './MyComponent.module.css';\r\n\r\nfunction MyComponent() {\r\n  return <div className={styles.myComponent}>Styled with CSS Modules</div>;\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Styled-Components\",\r\n                \"example_code\": `\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div\\`\r\n  background-color: lightgray;\r\n\\`;\r\n\r\nfunction MyComponent() {\r\n  return <Wrapper>Styled with styled-components</Wrapper>;\r\n}`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Error Handling\",\r\n        \"topic_description\": \"React provides error boundaries, a way to gracefully handle errors that occur within the component tree and prevent the entire application from crashing.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Error Boundary Component\",\r\n                \"example_code\": `\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <div>Something went wrong.</div>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using Error Boundary\",\r\n                \"example_code\": `\r\n<ErrorBoundary>\r\n  <ComponentWithError />\r\n</ErrorBoundary>`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"React Testing\",\r\n        \"topic_description\": \"Testing is an essential part of building reliable React applications. Tools like Jest and React Testing Library are commonly used for testing React components and applications.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Setting up Testing Environment\",\r\n                \"example_code\": `\r\n// Install Jest and React Testing Library\r\nnpm install --save-dev jest @testing-library/react @testing-library/jest-dom\r\n\r\n// Configure Jest in package.json or jest.config.js\r\n{\r\n  \"setupFilesAfterEnv\": [\"@testing-library/jest-dom/extend-expect\"]\r\n}`            },\r\n            {\r\n                \"subtopic_name\": \"Writing Component Tests\",\r\n                \"example_code\": `\r\nimport { render, screen } from '@testing-library/react';\r\nimport MyComponent from './MyComponent';\r\n\r\ntest('renders the component', () => {\r\n  render(<MyComponent />);\r\n  const element = screen.getByText('Hello, React!');\r\n  expect(element).toBeInTheDocument();\r\n});`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"React Router\",\r\n        \"topic_description\": \"React Router is a popular library for adding client-side routing to your React applications, enabling navigation between different views or pages.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Installing and Setup\",\r\n                \"example_code\": `\r\n// Install React Router using npm or yarn\r\nnpm install react-router-dom\r\n\r\n// Import necessary components and set up routes\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\n// Define routes using <Route> components\r\n<Router>\r\n  <nav>\r\n    <ul>\r\n      <li><Link to=\"/\">Home</Link></li>\r\n      <li><Link to=\"/about\">About</Link></li>\r\n    </ul>\r\n  </nav>\r\n  <Route path=\"/\" exact component={Home} />\r\n  <Route path=\"/about\" component={About} />\r\n</Router>`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Navigating Between Routes\",\r\n                \"example_code\": `\r\n// Use <Link> components to navigate between routes\r\n<Link to=\"/about\">About</Link>\r\n\r\n// Programmatically navigate using history\r\nthis.props.history.push('/about');`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"React Context\",\r\n        \"topic_description\": \"React Context provides a way to pass data through the component tree without having to pass props down manually at every level. It's often used for managing application-level state.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Creating a Context\",\r\n                \"example_code\": `\r\n// Create a context\r\nconst MyContext = React.createContext();`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Providing and Consuming Context\",\r\n                \"example_code\": `\r\n// Provide context value at a higher level\r\n<MyContext.Provider value={/* value */}>\r\n  {/* Child components can consume the context */}\r\n  <MyContext.Consumer>\r\n    {value => /* render something based on value */}\r\n  </MyContext.Consumer>\r\n</MyContext.Provider>;`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Redux\",\r\n        \"topic_description\": \"Redux is a state management library for React applications. It helps manage the state of your application in a predictable and centralized manner.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Installing Redux\",\r\n                \"example_code\": `\r\n// Install Redux using npm or yarn\r\nnpm install redux react-redux\r\n\r\n// Create a Redux store and configure it\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(rootReducer);`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Actions and Reducers\",\r\n                \"example_code\": `\r\n// Define actions and reducers\r\nconst increment = () => ({ type: 'INCREMENT' });\r\n\r\nconst counterReducer = (state = 0, action) => {\r\n  switch (action.type) {\r\n    case 'INCREMENT':\r\n      return state + 1;\r\n    default:\r\n      return state;\r\n  }\r\n};`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Connecting React Components\",\r\n                \"example_code\": `\r\n// Connect React components to the Redux store\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => ({\r\n  count: state\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  increment\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"React Hooks\",\r\n        \"topic_description\": \"React Hooks allow functional components to use state and other React features without writing a class. They provide a more concise and readable way to manage state and side effects.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"useState Hook\",\r\n                \"example_code\": `\r\nimport React, { useState } from 'react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      Count: {count}\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"useEffect Hook\",\r\n                \"example_code\": `\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction Example() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    document.title = \\`Count: \\${count}\\`;\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      Count: {count}\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Styling in React\",\r\n        \"topic_description\": \"Styling in React can be done using CSS, CSS modules, or popular CSS-in-JS libraries like styled-components or Emotion.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"CSS Stylesheets\",\r\n                \"example_code\": `\r\nimport './MyComponent.css';\r\n\r\nfunction MyComponent() {\r\n  return <div className=\"my-component\">Styled with CSS</div>;\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"CSS Modules\",\r\n                \"example_code\": `\r\nimport styles from './MyComponent.module.css';\r\n\r\nfunction MyComponent() {\r\n  return <div className={styles.myComponent}>Styled with CSS Modules</div>;\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Styled-Components\",\r\n                \"example_code\": `\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div\\`\r\n  background-color: lightgray;\r\n\\`;\r\n\r\nfunction MyComponent() {\r\n  return <Wrapper>Styled with styled-components</Wrapper>;\r\n}`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"Error Handling\",\r\n        \"topic_description\": \"React provides error boundaries, a way to gracefully handle errors that occur within the component tree and prevent the entire application from crashing.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Error Boundary Component\",\r\n                \"example_code\": `\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <div>Something went wrong.</div>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}`\r\n            },\r\n            {\r\n                \"subtopic_name\": \"Using Error Boundary\",\r\n                \"example_code\": `\r\n<ErrorBoundary>\r\n  <ComponentWithError />\r\n</ErrorBoundary>`\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"topic_name\": \"React Testing\",\r\n        \"topic_description\": \"Testing is an essential part of building reliable React applications. Tools like Jest and React Testing Library are commonly used for testing React components and applications.\",\r\n        \"subtopics\": [\r\n            {\r\n                \"subtopic_name\": \"Setting up Testing Environment\",\r\n                \"example_code\": `\r\n// Install Jest and React Testing Library\r\nnpm install --save-dev jest @testing-library/react @testing-library/jest-dom\r\n\r\n// Configure Jest in package.json or jest.config.js\r\n{\r\n  \"setupFilesAfterEnv\": [\"@testing-library/jest-dom/extend-expect\"]\r\n}`            },\r\n            {\r\n                \"subtopic_name\": \"Writing Component Tests\",\r\n                \"example_code\": `\r\nimport { render, screen } from '@testing-library/react';\r\nimport MyComponent from './MyComponent';\r\n\r\ntest('renders the component', () => {\r\n  render(<MyComponent />);\r\n  const element = screen.getByText('Hello, React!');\r\n  expect(element).toBeInTheDocument();\r\n});`\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n// console.log(JSON.stringify(reactCheatSheet, null, 2));\r\nexport default ReactData;"],"mappings":"AAAA,IAAIA,WAAW;AACf,IAAIC,SAAS,GAAG,CACZ;EACI,YAAY,EAAE,kBAAkB;EAChC,mBAAmB,EAAE,mMAAmM;EACxN,WAAW,EAAE,CACT;IACI,eAAe,EAAE,uBAAuB;IACxC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,kBAAkB;IACnC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,OAAO;IACxB,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,OAAO;IACxB,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,KAAK;EACnB,mBAAmB,EAAE,oMAAoM;EACzN,WAAW,EAAE,CACT;IACI,eAAe,EAAE,mBAAmB;IACpC,cAAc,EAAG;AACjC;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,iBAAiB;IAClC,cAAc,EAAG;AACjC;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,mBAAmB;IACpC,cAAc,EAAG;AACjC;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,qBAAqB;EACnC,mBAAmB,EAAE,yKAAyK;EAC9L,WAAW,EAAE,CACT;IACI,eAAe,EAAE,eAAe;IAChC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,sBAAsB;IACvC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,eAAe;IAChC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,oBAAoB;EAClC,mBAAmB,EAAE,iJAAiJ;EACtK,WAAW,EAAE,CACT;IACI,eAAe,EAAE,oBAAoB;IACrC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,gBAAgB;IACjC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,qBAAqB;IACtC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,mBAAmB;EACjC,mBAAmB,EAAE,kMAAkM;EACvN,WAAW,EAAE,CACT;IACI,eAAe,EAAE,mBAAmB;IACpC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,oBAAoB;IACrC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,sBAAsB;IACvC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,gBAAgB;EAC9B,mBAAmB,EAAE,6HAA6H;EAClJ,WAAW,EAAE,CACT;IACI,eAAe,EAAE,uBAAuB;IACxC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,wBAAwB;IACzC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,uBAAuB;EACrC,mBAAmB,EAAE,mHAAmH;EACxI,WAAW,EAAE,CACT;IACI,eAAe,EAAE,uCAAuC;IACxD,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,uBAAuB;IACxC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,gBAAgB;EAC9B,mBAAmB,EAAE,6IAA6I;EAClK,WAAW,EAAE,CACT;IACI,eAAe,EAAE,iBAAiB;IAClC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,yBAAyB;IAC1C,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,iCAAiC;EAC/C,mBAAmB,EAAE,0HAA0H;EAC/I,WAAW,EAAE,CACT;IACI,eAAe,EAAE,gBAAgB;IACjC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,cAAc;EAC5B,mBAAmB,EAAE,oJAAoJ;EACzK,WAAW,EAAE,CACT;IACI,eAAe,EAAE,sBAAsB;IACvC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,2BAA2B;IAC5C,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,eAAe;EAC7B,mBAAmB,EAAE,uLAAuL;EAC5M,WAAW,EAAE,CACT;IACI,eAAe,EAAE,oBAAoB;IACrC,cAAc,EAAG;AACjC;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,iCAAiC;IAClD,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,OAAO;EACrB,mBAAmB,EAAE,oJAAoJ;EACzK,WAAW,EAAE,CACT;IACI,eAAe,EAAE,kBAAkB;IACnC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,sBAAsB;IACvC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,6BAA6B;IAC9C,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,aAAa;EAC3B,mBAAmB,EAAE,uLAAuL;EAC5M,WAAW,EAAE,CACT;IACI,eAAe,EAAE,eAAe;IAChC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,gBAAgB;IACjC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,kBAAkB;EAChC,mBAAmB,EAAE,wHAAwH;EAC7I,WAAW,EAAE,CACT;IACI,eAAe,EAAE,iBAAiB;IAClC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,aAAa;IAC9B,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,mBAAmB;IACpC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,gBAAgB;EAC9B,mBAAmB,EAAE,2JAA2J;EAChL,WAAW,EAAE,CACT;IACI,eAAe,EAAE,0BAA0B;IAC3C,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,sBAAsB;IACvC,cAAc,EAAG;AACjC;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,eAAe;EAC7B,mBAAmB,EAAE,kLAAkL;EACvM,WAAW,EAAE,CACT;IACI,eAAe,EAAE,gCAAgC;IACjD,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EAAc,CAAC,EACH;IACI,eAAe,EAAE,yBAAyB;IAC1C,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,cAAc;EAC5B,mBAAmB,EAAE,oJAAoJ;EACzK,WAAW,EAAE,CACT;IACI,eAAe,EAAE,sBAAsB;IACvC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,2BAA2B;IAC5C,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,eAAe;EAC7B,mBAAmB,EAAE,uLAAuL;EAC5M,WAAW,EAAE,CACT;IACI,eAAe,EAAE,oBAAoB;IACrC,cAAc,EAAG;AACjC;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,iCAAiC;IAClD,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,OAAO;EACrB,mBAAmB,EAAE,oJAAoJ;EACzK,WAAW,EAAE,CACT;IACI,eAAe,EAAE,kBAAkB;IACnC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,sBAAsB;IACvC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,6BAA6B;IAC9C,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,aAAa;EAC3B,mBAAmB,EAAE,uLAAuL;EAC5M,WAAW,EAAE,CACT;IACI,eAAe,EAAE,eAAe;IAChC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,gBAAgB;IACjC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,kBAAkB;EAChC,mBAAmB,EAAE,wHAAwH;EAC7I,WAAW,EAAE,CACT;IACI,eAAe,EAAE,iBAAiB;IAClC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,aAAa;IAC9B,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,mBAAmB;IACpC,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,gBAAgB;EAC9B,mBAAmB,EAAE,2JAA2J;EAChL,WAAW,EAAE,CACT;IACI,eAAe,EAAE,0BAA0B;IAC3C,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC,EACD;IACI,eAAe,EAAE,sBAAsB;IACvC,cAAc,EAAG;AACjC;AACA;AACA;EACY,CAAC;AAET,CAAC,EACD;EACI,YAAY,EAAE,eAAe;EAC7B,mBAAmB,EAAE,kLAAkL;EACvM,WAAW,EAAE,CACT;IACI,eAAe,EAAE,gCAAgC;IACjD,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;EAAc,CAAC,EACH;IACI,eAAe,EAAE,yBAAyB;IAC1C,cAAc,EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACY,CAAC;AAET,CAAC,CACJ;;AAED;AACA,eAAeA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}